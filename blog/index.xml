<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on tbd</title>
    <link>https://daikikohara.github.io/blog/</link>
    <description>Recent content in Blogs on tbd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 07 Jun 2017 14:49:18 -0800</lastBuildDate>
    
	<atom:link href="https://daikikohara.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Amazon DynamoDB Accelerator(DAX) Webinar視聴メモ</title>
      <link>https://daikikohara.github.io/blog/2017/06/07/dax-webinar/</link>
      <pubDate>Wed, 07 Jun 2017 14:49:18 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2017/06/07/dax-webinar/</guid>
      <description> なぜか久しぶりにブログを更新したくなったのでライトな内容ですが、先日聞いたAmazon DynamoDB Accelerator(DAX)のWebinarの視聴メモを上げてみます。
 動画 スライド  視聴メモ  DynamoDB専用のキャッシュで10x程度の高速化が見込めるとともにProvisioned Capacityを下げることでコストの低減も見込める。 APIはDynamoDBと互換性があるので、クライアントを入れ替えるだけで透過的に使える。  CreateTableとかDeleteTableとかのAPIは使えない  デモだとレイテンシは通常のDynamoDBアクセスと比べて1/10〜1/20になってた。  GetItemが0.25msくらい  インスタンスタイプを選んでクラスタを立ち上げる。クラスタはVPC内で立ち上がる。  スケールアップは244GBまで可能 スケールアウトは10レプリカまで可能  PutItemとかGetItemで使われるItemキャッシュとqueryとかscanで使われるQueryキャッシュが分かれている。 書き込み時だけじゃなくてキャッシュミス時にも自動でキャッシュがpopulateされる。  WriteBack(新しい値を書き込む時にDAXに書き込んだら結果を返し、DAXが後で非同期でDynamoDBに書き込む)はまだ利用できない。  アプリとクラスタの関係は1:1、1:多、多:１、多:多の何でもオッケー キャッシュEvictionは以下の3パターン  TTL: デフォルト5分 LRU：デフォルトでオンでオフにはできない WriteThrough: 新しい値を書き込んだ時に行われる  マニュアルでフラッシュするAPIは無い。  感想とか気になった点  インスタンスの料金以外に追加で料金がかかるのかが気になる。 アプリとDynamoDBの間に1レイヤ入るので、クラスタが落ちてたときとかの挙動が気になる。 サンプルプログラムでクライアントにコンフィグファイルを渡してたが、どんな内容のコンフィグファイルなのかが気になる。 かなり簡単で良さそうだけど、DBから取り出すデータとキャッシュが1:1じゃない関係でキャッシュしたい場合もあるからRedisとかでキャッシュするのがなくなるわけでは無さそう。  </description>
    </item>
    
    <item>
      <title>Unikernelのmeetupの視聴メモ</title>
      <link>https://daikikohara.github.io/blog/2016/02/12/unikernel-meetup/</link>
      <pubDate>Fri, 12 Feb 2016 12:49:18 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2016/02/12/unikernel-meetup/</guid>
      <description>Docker社が買収したUnikernel Systems社が扱ってるUnikernelについて全然知らなかったので、Docker Online MeetupのUnikernelの動画を見たついでに、分からないところを調べられた範囲で補完しつつまとめてみました。なお、超基本的な内容です。
動画だけでなくスライド自体も上がってます。
先に自分が理解した範囲でまとめを書くと、以下のような流れみたいです。
 Unikernelは単一のアプリを動かすためのシンプルかつ高速なOSで色々な実装がある。 でも従来のOSと違うし、各実装ごとにツールもあるしで、アプリをビルドして動かすのが大変。 dockerのエコシステムに取り込んでdockerコマンドでビルド・デプロイできるようになったらいいんじゃないってことで買収した。  従来のOSの問題 http://www.slideshare.net/Docker/docker-online-meetup-31-unikernelsより引用現在使われているLinux等のOSは膨大なコードを持ち、アプリケーションに必要でない部分もシステムに組み込む必要がある。 そのためアプリケーションがSystemAPIと結びついてしまい、以下のような問題がある。
 OSのディストリビューションやバージョンの制約を受ける アプリケーションのアドホックな設定が必要になる ファイアウォール等、システム全体の設定が必要になる  これは従来のOSの目的が、複数のユーザが複数のアプリを同時に動かすことだからだ。 しかしマイクロサービス等、現在のアーキテクチャでは一つのアプリのみを動かすだけという使い方も考えられるため、従来のOSの目的と合わなくなってきている。
また、ポータブル性の欠如という問題もある。 従来のシステムでビルドは環境に依存するが、実際は複数のターゲットを扱わないといけない。 例えば複数のターゲットを持つクラウドサービスやスマートフォンといったもの。またJavaScriptもブラウザにより異なるし、IoTでもデバイス毎に異なる。 これらは複数のターゲットごとにプログラムせねばならず、コードの再利用は難しい。
Unikernelとは何か http://www.slideshare.net/Docker/docker-online-meetup-31-unikernelsより引用これらの問題を解決するためにUnikernelが役に立つ。 Unikernelには以下のような特徴がある。
 OSのコンポーネントをライブラリの集合として利用できるようにしている。 ビルド時にアプリケーションのコードをシステムライブラリとリンクし、アプリケーションが必要とするライブラリだけを使うことが可能。 単一のプロセス、単一のアドレススペースのイメージが作成される。 アプリケーションは同じコードベースを使い、ビルド時にシステムライブラリを切り替えるだけでターゲットの変更が可能。  なお、Unikernelのコンセプトは新しいものではなく、1990年代から存在していた。
利点 前述の特徴から以下のような利点がある。
 必要なライブラリのみをスタティックにリンクできるため、シンプルにできる。 TCP接続が確立される間にブートできるくらい高速。 レイヤーが少ないので低レイテンシおよび、パフォーマンスの予測が容易。 リソースをあまり使わない。例えばUnikernelの実装の一つであるMirageOSのアプリは10MB以下のメモリしか使わない。MirageOSのDNSサーバは200KBしかない。 マイクロサービスやImmutable Infrastructure等の新しいデザインパターンの構築が容易になる。  Unikernelを使う場合の開発サイクル 以下のような流れで開発していくことができ従来の方法と大きくは変わらない。
 アプリのビルドは普通に行うが、OSのコンポーネントに対応するライブラリを使ってリンクすることと、従来のホストOSとの依存性を排除するという点が従来と異なる。 テストや測定は通常通りに行うことが可能。 Unikernelとしてビルドする デプロイする  利用するツールもCIシステム、gdb、プロファイラ、linterやdtraceといった従来のものが利用可能。 カーネル空間・ユーザ空間というものがなく全てがユーザ空間で動くので、通常のツールが利用できる。
Unikernelの実装 Unikernelには多くの実装がある。 それぞれトレードオフがある。 例えばMirageOSとHaLVMはまっさらな状態からライブラリを書き直している。 一方Rumprunは長年使われてきたNetBSDのコンポーネントを再利用している。
(ちなみにMirageOSはOCaml、HaLVMはHaskell、RumprunはCでそれぞれ書かれている)
このように現在のアーキテクチャに適したUnikernelだが、導入時の障壁として以下のようなものが考えられる。
 デベロッパーはUnikernelを使うために様々なツールを学ぶ必要がある。 複数のプロジェクトがあるということは複数のツールチェーンがあるということ デプロイが単純には行かないということでもある  これらを解決するために、DockerはUnikernelと手を取った。</description>
    </item>
    
    <item>
      <title>Android Dev Summit2015の視聴メモ</title>
      <link>https://daikikohara.github.io/blog/2015/11/23/android-dev-summit-2015/</link>
      <pubDate>Mon, 23 Nov 2015 12:49:18 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/11/23/android-dev-summit-2015/</guid>
      <description>2015年11月23,24日にマウンテンビューで行われたAndroid Dev Summitの視聴メモです。 参加ではなくライブストリーミングを聞きながらメモった内容です。両日とも私用のため午前中のセッションのみです。また、Keynote以外はかなり簡単な紹介なので気になる内容があれば直接動画を見てもらえばと思います(動画ページへのリンクも貼ってます)。 個別動画へのリンク(2日目分でまだアップされてないもの)やまとめ・レポートサイトへのリンク等はあとで追記予定です。 レコーディング動画はこちらに随時アップされますが見直して追記等はしない予定です。 ちなみに個人的には1日目のKeynoteと2日目の最初のセッション(What&amp;rsquo;s new in Android Studio)と2日目の2番目のセッション(データバインディングの話。初出はI/Oだったらしいですが)は見た方が良いかなと思います。
初日 Keynote  9:05am - 9:45am スピーカ: Dave Burke &amp;amp; Stephanie Saad Cuthbertson(Andoridのエンジニアチーム) 動画  https://androiddevsummit.withgoogle.com/streamより引用導入的な話(by Dave)  以前はPalmOS、WindowsMobile、Symbianとか色々なOSがあって、それぞれのOS用にアプリを提供するのがツラかった。そこからOSSのプラットフォームを作ろうという話になってAndroidが生まれた。 AndoridではCompatibilityDefinitionDocumentがあって機種間で互換性を保てるようになっている。 現在のGoogle検索は50%以上がモバイルから行われている。 1.4ビリオンのAndroidアクティブユーザがいる。 CupCake, Donut, Eclair, Froyo, Gingerbread, Honeycomb, IceCreamSandwich, JellyBean, KitKat, Lollipop, Marshmallowをそれぞれ振り返りそれぞれで何ができるようになったかの紹介。  AndroidStudio2.0リリース(by Stephanie) ※既にリリースされているので関連記事読んだ方が良いと思われます。まだ日本語の記事はないっぽいけど英語だとTechCrunchに記事がありました。公式ブログでも紹介されています。
 プレビュー版のダウンロードはここから スピードへのフォーカス  ビルドスピードが2倍以上早くなる。インクリメンタルビルドだと数秒で終わる。  エミュレータが早くない、安定しないという意見があったので改善した。 エミュレータはWindowをドラッグしてリサイズできるようになる。 カメラやバッテリーステータス等をエミュレートできるようになる。 Google Play Serviceが含まれるようになる。 GPUプロファイラ(Early Preview)  グラフィックインテンシブなアプリ向け。 GPUのデバッグができる。 GPUストリームをレコードしてリプレイできる。  出たばかりのIntelliJ 15と統合されている テストサポートの強化  UnitTestとAndroidTestを両方同時に走らせることができる？(あんまり詳しくないのでよく分からず)  GoogleSearchとのDeepLinkの生成やリアルタイムでちゃんとGoogleにIndexされているか確認できるようになる(若干理解が怪しい) まだEclipseを使ってる人がいるけど早く移行して欲しい。 InstantRun(インクリメンタルビルドって言ってたやつ？)の紹介  リソースやソースを変更したらすぐに反映される 1,2秒で反映される デモ(あとでもっと詳しいデモがあった) Instant Runは全てのエミュレータ、実デバイス、IceCreamSandwithAPI15までの全OSで動く   新バージョン使ったライブコーディング(by Dave)  ライブコーディングしながら実デバイスにデプロイ ホットスワップ(Instant Run)  リソースとコードが一瞬でデプロイできる例(最初かなりトラブってたｗ) チェスゲームを例に、ビューを3Dにしたり、コマのサイズの変更をライブで行って一瞬で変わっていた。  DevSummitの今後のセッションの説明をして終了  Android application architecture  スピーカ: Yigit Boyar &amp;amp; Adam Powell 9:45am - 10:30am 動画  https://androiddevsummit.</description>
    </item>
    
    <item>
      <title>Wireshark2.0のメモ</title>
      <link>https://daikikohara.github.io/blog/2015/11/13/wireshark-2.0-introduction/</link>
      <pubDate>Fri, 13 Nov 2015 13:33:33 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/11/13/wireshark-2.0-introduction/</guid>
      <description>Wiresharkが初のメジャーアップデートということで話題になっていたのでこの紹介動画を見たのでメモです。 ちなみに2015年11月13日現在では2.0のstable版は出ていません。RC版はLinux向けのは無いので試せてないですが出たら追記すると思います。
=&amp;gt;(11/23追記)11/18にstable版が出ましたが、Mac/Windowsのみです。自分はLinux(Fedora)ユーザのため試すのはもう少し先になりそうです。
視聴メモ  Qtインターフェース採用  UIは大分変わっていた AndroidやiOSでも動くようになる、、、かもとのこと Legacyを選ぶと従来のGTKインターフェースで動く デモは全てQt版でのデモ  USBPcap  USBポート経由のキャプチャができる newって紹介されてたけど、多分新しいものではないはず。  UIの変更点(で便利だと思ったもの)  メイン画面でパケットを選択すると、左端のカラムに対応するパケットが示される カラールールがスクロールバーにも表示される  グラフ  IOグラフ - 元からあるけど右クリックメニューで何か便利になってたっぽい TCPストリームグラフ - シーケンスとかスループットとか最初に選んで変えれなかったけど、グラフ開いてからで変更ができるようになったみたい。また、AからB向きの方向を逆にするのもグラフ上でできる。  多言語対応  デフォルトはシステム設定 日本語はあった  その他  デモ用のTraceファイルは公式サイトに置いてある 2.2とか偶数がstable版らしい 現時点の最新版はRC3 2.0の公式版は18日リリースしたい。   動画を見た正直な印象はUIが多少変わっただけで対して変わってないんじゃ？って思っちゃいましたが、使ってみないと何とも言えませんね。</description>
    </item>
    
    <item>
      <title>NomadとOttoのmeetup参加メモ</title>
      <link>https://daikikohara.github.io/blog/2015/11/11/nomad_otto_features/</link>
      <pubDate>Wed, 11 Nov 2015 22:45:00 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/11/11/nomad_otto_features/</guid>
      <description>HashiCorpのCTOであるArmon Dadgar氏によるNomadとOttoに関するmeetupの参加メモ。 またしてもかなり不完全ですが。。。こっちって技術系でもmeetupでPC開いている人が殆どいなくてメモとりづらいんですよね。
 動画は無し。スライドはこちら ステッカーは配ってませんでした  HashiCorpプロダクト全般の話
  Vagrantがあった状態で会社を作った。最初はDevOpsの会社だと思われていたがDevOpsだけじゃなくてDev寄りのツール等も作ってきた。 Vaultはオープンにするつもりで作ったわけではなかった。サポート等をする内に認証情報等を保存することが増えてきて、どうやって管理したら良いんだろうということを考えて作って社内で使っていたものをオープンソースにした。 実は最初のうちはPostgreSQLに平文で保存していた(しようとしていたかも？)。 ちなみにHashiCorpはaにアクセントがある模様。oだと思ってた^^;  Nomadの話  Nomadはクラスタ管理ツール 内部的にはConsulとSerfを使っている。 コンテナ・VM・スタンドアロンのアプリをサポートしている。  現在はコンテナはDocker、VMはQEMU/KVM、スタンドアロンはJar(Java)と静的バイナリのみ。今後拡大予定。  amplabやGoogle Researchの研究をかなり参考にした。 データセンターやクラウドサービス、リージョンなどを跨いで管理できる EvaluationしてからAllocationするといった感じのアーキテクチャを紹介(図が無いとアレですが。。。) ジョブの分散処理はロックとかではなくOptimisctic Concurrencyによるとのこと。 Digital Oceanでテストしたらしい。数百ノード使ったとか言っていた。 0.2ではService Discovery、SystemScheduler、RestartPolicies、EnhancedConstraints等を追加予定 0.3ではCron、JobQueuing、Latency-Aware Scheduling等を追加予定  Ottoの話  Vagrantでは同じVagrantファイルで全く同じものができる。ただし、昔の脆弱性等をそのままデプロすることになるし、古いOSを使うことになる。 Ottoではこの辺りは自動で解決してくれる。 vagrant upがotto devになる等の対応の話 開発者がコードのデプロイをするにはググッて出てきた情報をコピペするという無駄な作業を今でも行っていたりする。しかも例えばrailsアプリのデプロイであれば毎回同じようなことをするだけなのに。 ottoならotto infra, otto build, otto deployの3ステップで完了する。 何の設定もしなくてもコマンドを実行するだけで良い。 設定が必要な場合はAppfileに書くことができる。 Appfileの書き方の例。Appfileは独自フォーマットみたい。  以上。
とりあえずちゃんと使ってみたらまたQiita辺りにポストしようかと思います。</description>
    </item>
    
    <item>
      <title>Twitter Flight視聴メモ</title>
      <link>https://daikikohara.github.io/blog/2015/10/22/twitter-flight-2015/</link>
      <pubDate>Thu, 22 Oct 2015 00:27:02 -0700</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/10/22/twitter-flight-2015/</guid>
      <description>2015年10月21日にサンフランシスコで行われたFlightの視聴メモです。 ライブストリーミングが流れてたメインホールのみです。例によってかなりいい加減です。そして最初の方はどこでライブストリーミングが見れるのか分からず逃しました。 てかTechCrunchのページでしか流してなくてオフィシャルサイトにリンクが無いという、情弱には厳しい配信でした。。。 ちなみにキーノートセッションの話はオフィシャルのこのページが網羅的にまとまっています。 動画やスライドはまだ公開されてないみたいですが、公式サイトのトップにすぐ上げるみたいなことが書かれてるのですぐにどこかに上がるんじゃないかと思います。
キーノート(途中から) 多分メインの話はFabricのアップデート。
ちなみにFabricとはiOS/Android向けにクラッシュレポートや広告等の様々な機能を提供するモバイルプラットフォーム。
 Twitterの特徴とかの紹介 一部で騒がれていた投票機能を誰でも使えるようになった Fabricとそのエコシステムの新機能の話  Fabricはリリースから1年で225,000のdeveloperを獲得 Crashlyticsは1.4BillionのAndroidデバイス上にインストールされているらしい。Unityをサポートするようなことを言っていた。 AnswersではAudience Insightsで誰が使っているかの追跡がしやすくなった。 MoPubの紹介 Tweet Composerの紹介 Stripeやaws等、新規に追加された8つのSDKの紹介。
Stripeとfastlaneは代表者がそれぞれを話をしていた。  Embeded Tweetの話(あとのセッションで詳しい話があったので省略) GNIPを使ってカスタマーサポートを行う例。これもあとで出てきたので省略するが、ここではTargetの事例ビデオやHiltonの事例ビデオが流れた。  こんなカスタマーサービスのドキュメントのリンクも貼ってた。  FurniというFabricを使った模範的なアプリの紹介。githubにソースもある。  A Week in the Life of a Fabric Developer by Brian Swift and Hemal Shah Fabricチームの二人がCannonballというFabricを使って作られたデモアプリのリリースを通してFabricを使った開発の1週間がどのようなものかを紹介する内容。 (ちなみにCannonballとはEmojiでPoemを書くサイトらしいが、poemは詩じゃなくて素敵な出来事とかそーゆー意味だと思われる。)
 月曜はFeature vs Fix、火曜はFeedback等、テーマに基づいて進めていく。 例えば月曜は、新しいことに取り掛かる前に現状のものがstableかを確認する。FabricのコンポーネントであるCrashlyticsやAnswersを使うと全体のステータスがダッシュボードで一望できるしフォーカスすべきクラッシュも分かる。 同様に火曜・水曜とFabricのコンポーネントを使ってどう進めていくかの紹介。  Growing and Monetizing Your App Using Twitter by John Egan MoPubのディレクタであるJohnがパネリストと広告・マネタイズに関する話をする。 パネリストはThreesの人とRedditの人とgluの人。 広告のターゲティングとかを考えた最適化の話。あんまり興味なかったので省略。Redditの人が美人だった。
Twitter上でカスタマーサービスを行うための話(公式サイト上の表記はSecret Session) Twitter上でカスタマーサービスを行うための話。</description>
    </item>
    
    <item>
      <title>Full Stack Robotics/IoT Using Go参加レポート</title>
      <link>https://daikikohara.github.io/blog/2015/10/07/iot_using_go_meetup/</link>
      <pubDate>Wed, 07 Oct 2015 14:53:26 -0700</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/10/07/iot_using_go_meetup/</guid>
      <description>マウンテンビューのGoogle本社で行われたGoでIoTデバイスを操作するGobotのイベントの参加メモです。 資料はまだ上がってないので上がった段階で追記します。
概要  日時: 2015年10月7日 19:00 - 20:30 場所: Google Building CL2 イベントページ  内容 LT by Kevin イベントページの発表者のlast nameは間違っているらしい(ググったけど映画監督しか出てこなったのはそのせいかｗ)。 正しい苗字はメモれなかった。
内容はイベントの紹介程度。
 GDG DevFest - まもなくポストするとのこと なぜかGeek Bike Rideとかいうチャリンカー向けイベントの紹介 子供向けイベントの紹介。  devoxx4kidsという webcomponents4kids   子供向けのイベントの紹介では発表者のお子さんの口から、こんなことをした、みたいな紹介が入った。
メインセッション 発表者 Ron Evans(twitterアカウント)
 hybridgroupの人。 Gobotに限らず、Cylon.js,ArtooといったIoT系のフレームワークを作っている。 子供向けのRubyのプロジェクトであるkidsrubyも作っている。  Gobotとは(サイトに書いてあるレベルのまとめ) GobotはGolangで様々なIoTプラットフォーム向けのプログラムが書くためのもの。
公式ページのトップにはArduinoでLチカするコードが載っているが、Arduinoに限らず15のプラットフォームに対応している(発表後の質疑応答で18と言っていたのでサイトの情報は若干古い模様。またcylon.jsの方が対応プラットフォームが多いとのこと)。 この中にはArduinoのほか、ARDroneやラズパイ、EdisonといったデバイスだけでなくMQTTやOpenCVといったものまで含まれる。 また、GPIOドライバにより7つ、I2Cドライバにより6つの機器をサポートしている。
APIも用意されており、デバイスの状態を確認することなどが可能。 robeauxというReact.jsベースのダッシュボードで確認することもできる。
CLIの場合はGortを使って操作するようデザインされてるけどgobot独自のCLIもある。
発表内容  アーキテクチャの図(スライド参照) ArduinoでLチカ(ちなみに英語ではblinking LED)をするデモ  コードはGobotのサイトトップに書いてあるものと全く同じだった。 Arduino上ではGoは動かないけどコンパイルしたコマンドを送ることができる  Edisonで同じくLチカをするデモ  Arduino版とのコードの差分はimort文1行とAdaptor生成部分のみ(firmata.NewFirmataAdaptor(&amp;quot;arduino&amp;quot;, &amp;quot;/dev/ttyACM0&amp;quot;)がedison.NewEdisonAdaptor(&amp;quot;edison&amp;quot;)になるだけ) edisonの場合は中身がLinuxなのでsshで接続してGoのプログラムを普通に走らせることができる  続いてEdisonでボタンを押してる間だけ光るデモ GobotでAPIを立ち上げるプログラムを動かして、そこにcurlを送るデモ  host:port/api/robotsが起点になる模様。 デモでは操作じゃなくて参照しかしなかった。  Gortのデモ  gort scan bluetoothでbluetooth接続されている機器を一覧表示してそこからrfcomm connectで接続(rfcommは普通のLinuxコマンドらしい。知らんかった。)  Spheroのデモ  robeauxを使ったデモ WebのUIからコマンド実行してSpheroを動かすデモ。あんまり思った通りの方向に進んでなかったｗ  Twitterで指定のハッシュタグで呟いてSpheroまたはEdisonを抽選で1名にプレゼント！  めっちゃ欲しかったけど当たりませんでした。。。  commander.</description>
    </item>
    
    <item>
      <title>GitHub Universe視聴まとめ</title>
      <link>https://daikikohara.github.io/blog/2015/10/02/github-universe-2015/</link>
      <pubDate>Fri, 02 Oct 2015 18:27:02 -0700</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/10/02/github-universe-2015/</guid>
      <description>2015年10月1日、2日にSFで行われたGitHub Universeの視聴レポートです。 近場でしたがお金とか時間の問題で参加はしてません。 ustreamのライブで見てたんですが結構途切れたりしたのと、自分の理解が怪しいところがあるのと、興味がないところはあんまりちゃんと書いてないので、メモ書き程度だと思ってもらえればと思います。 ちなみにKeynote以外は3セッション並列だったんですが、ライブで見てたので自分が見たものだけです。 録画もustreamのサイトから見れるのでちゃんと見たい人はそちらへお願いします。
1日目 Keynote by Chris Wanstrath, GitHub(CEO)  始まってるのに気づかず最後の方しか見れず。 最後の方はStarCraftの話をしていた。GitHub Pagesで動いてるらしい。  Githubのコマーシャルが流れる  多分あとでここに上がるはず？  Exploring the Solar System from wherever you are! by Joseph Minafra, NASA  SERVIの紹介 月の形成に関するビデオ紹介 誰でも参加できるようなイベントも開いている。 Lunar Mapping and Modeling Portal(LMMP)で月を探索できる。  RestAPIもある。(NASAは他にも色々APIあるっぽい)  月だけじゃなくてVesta(小惑星用？)とか火星用とかもある。 全然githubは出てこなかった。  Five years, building a culture, and handing it off by Kellan Elliott-McCrea, former CTO of Etsy  中継あったけど別作業のため殆ど聞けず。 ソフトを作るのが下手だから頑張らないといけないみたいな話。 デプロイするときに現行システムを壊すリスクと自信の話。  テストとかモニタリングとかして自信を上げていこう。 CSSの小さい修正でシステムを破壊したやつがいたりするので、デプロイする修正の規模と比例しないよみたいな。   Using Git LFS by GitHub/Microsoft/Atlassian  Speaker(それぞれが順番に話していくスタイル)  Traci Coffman, GitHub Saeed Noursalehi, Microsoft Rick Olson, GitHub Allen Smith, GitHub Steve Streeting, Atlassian   Rick from GitHub  Git LFS(Large File Storage)の概要紹介  デカいファイルを追加したときにGitレポジトリにはテキストポインタを保存してファイルの実態はLFSに保存するといったことができる。 LFS用にいくつかのサブコマンドを追加した Git hookとintegrateされている  なんでOSS?</description>
    </item>
    
    <item>
      <title>Android用の単語帳アプリをリリースしました</title>
      <link>https://daikikohara.github.io/blog/2015/09/20/release-of-simpleswipeflashcard/</link>
      <pubDate>Sun, 20 Sep 2015 11:37:37 -0700</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/09/20/release-of-simpleswipeflashcard/</guid>
      <description>日本のSI系の会社を辞めて今年の4月からシリコンバレーの学校に通っています(詳しい話はいずれ書くかもしれません)。 日本ではバックエンドメインだったんですが、折角なので新しいことをやろうと思い、授業ではWeb系とかAndroidとかの授業を中心に取ってみました。
ということで、授業で作ったAndroid用の単語帳アプリをブラッシュアップしてリリースしました。 単語帳アプリは既に色々存在していますが(というかGooglePlay見てみたらびっくりするくらいレッドオーシャンでしたｗ)、自分が使いやすいものを作りたかったので再発明してしまいました。。。
 SimpleSwipeFlashcard(Google Play)  特徴は、
 単語帳はダウンロードだけじゃなく自分でも作れる。 スワイプベースでストレスなく操作できる。 テストで間違えた単語は正解するまでリトライできる。 一定数正解すると暗記済みになる。 作った単語帳はGoogleスプレッドシートにエクスポートして編集できる。 見た目や挙動を色々カスタマイズできる。  って感じです。
普段の生活で分からない単語はPCでスプレッドシートにメモってるんですけど、それをそのまま使えたらいいなぁと思って作ることにしました。 ダウンロード可能な単語帳は、今まで手元にメモってた単語帳等を編集してカテゴリ別に配信してたりします。今後も追加していく予定です。
無料かつ広告もちょこっとなので良かったら使ってみてくださいm(_ _)m</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Conference on tbd</title>
    <link>https://daikikohara.github.io/categories/conference/</link>
    <description>Recent content in Conference on tbd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 23 Nov 2015 12:49:18 -0800</lastBuildDate>
    <atom:link href="https://daikikohara.github.io/categories/conference/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Dev Summit2015の視聴メモ</title>
      <link>https://daikikohara.github.io/blog/2015/11/23/android-dev-summit-2015/</link>
      <pubDate>Mon, 23 Nov 2015 12:49:18 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/11/23/android-dev-summit-2015/</guid>
      <description>

&lt;p&gt;2015年11月23,24日にマウンテンビューで行われた&lt;a href=&#34;https://androiddevsummit.withgoogle.com/&#34;&gt;Android Dev Summit&lt;/a&gt;の視聴メモです。
参加ではなくライブストリーミングを聞きながらメモった内容です。両日とも私用のため午前中のセッションのみです。また、Keynote以外はかなり簡単な紹介なので気になる内容があれば直接動画を見てもらえばと思います(動画ページへのリンクも貼ってます)。
個別動画へのリンク(2日目分でまだアップされてないもの)やまとめ・レポートサイトへのリンク等はあとで追記予定です。
レコーディング動画は&lt;a href=&#34;https://www.youtube.com/playlist?list=PLWz5rJ2EKKc_Tt7q77qwyKRgytF1RzRx8&#34;&gt;こちら&lt;/a&gt;に随時アップされますが見直して追記等はしない予定です。
ちなみに個人的には1日目のKeynoteと2日目の最初のセッション(What&amp;rsquo;s new in Android Studio)と2日目の2番目のセッション(データバインディングの話。初出はI/Oだったらしいですが)は見た方が良いかなと思います。&lt;/p&gt;

&lt;h1 id=&#34;初日:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;初日&lt;/h1&gt;

&lt;h2 id=&#34;keynote:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;Keynote&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;9:05am - 9:45am&lt;/li&gt;
&lt;li&gt;スピーカ: Dave Burke &amp;amp; Stephanie Saad Cuthbertson(Andoridのエンジニアチーム)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oBV2U4w89_A&#34;&gt;動画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/AndroidStudio2.0-1.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;h3 id=&#34;導入的な話-by-dave:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;導入的な話(by Dave)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;以前はPalmOS、WindowsMobile、Symbianとか色々なOSがあって、それぞれのOS用にアプリを提供するのがツラかった。そこからOSSのプラットフォームを作ろうという話になってAndroidが生まれた。&lt;/li&gt;
&lt;li&gt;Andoridでは&lt;a href=&#34;http://static.googleusercontent.com/media/source.android.com/en//compatibility/android-cdd.pdf&#34;&gt;CompatibilityDefinitionDocument&lt;/a&gt;があって機種間で互換性を保てるようになっている。&lt;/li&gt;
&lt;li&gt;現在のGoogle検索は50%以上がモバイルから行われている。&lt;/li&gt;
&lt;li&gt;1.4ビリオンのAndroidアクティブユーザがいる。&lt;/li&gt;
&lt;li&gt;CupCake, Donut, Eclair, Froyo, Gingerbread, Honeycomb, IceCreamSandwich, JellyBean, KitKat, Lollipop, Marshmallowをそれぞれ振り返りそれぞれで何ができるようになったかの紹介。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;androidstudio2-0リリース-by-stephanie:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;AndroidStudio2.0リリース(by Stephanie)&lt;/h3&gt;

&lt;p&gt;※既にリリースされているので関連記事読んだ方が良いと思われます。まだ日本語の記事はないっぽいけど英語だと&lt;a href=&#34;http://techcrunch.com/2015/11/23/android-studio-2-0-with-improved-android-emulator-and-instant-run/&#34;&gt;TechCrunch&lt;/a&gt;に記事がありました。&lt;a href=&#34;http://android-developers.blogspot.com/2015/11/android-studio-20-preview.html&#34;&gt;公式ブログ&lt;/a&gt;でも紹介されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プレビュー版のダウンロードは&lt;a href=&#34;http://tools.android.com/download/studio/builds/2-0-preview&#34;&gt;ここ&lt;/a&gt;から&lt;/li&gt;
&lt;li&gt;スピードへのフォーカス

&lt;ul&gt;
&lt;li&gt;ビルドスピードが2倍以上早くなる。インクリメンタルビルドだと数秒で終わる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エミュレータが早くない、安定しないという意見があったので改善した。&lt;/li&gt;
&lt;li&gt;エミュレータはWindowをドラッグしてリサイズできるようになる。&lt;/li&gt;
&lt;li&gt;カメラやバッテリーステータス等をエミュレートできるようになる。&lt;/li&gt;
&lt;li&gt;Google Play Serviceが含まれるようになる。&lt;/li&gt;
&lt;li&gt;GPUプロファイラ(Early Preview)

&lt;ul&gt;
&lt;li&gt;グラフィックインテンシブなアプリ向け。&lt;/li&gt;
&lt;li&gt;GPUのデバッグができる。&lt;/li&gt;
&lt;li&gt;GPUストリームをレコードしてリプレイできる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;出たばかりのIntelliJ 15と統合されている&lt;/li&gt;
&lt;li&gt;テストサポートの強化

&lt;ul&gt;
&lt;li&gt;UnitTestとAndroidTestを両方同時に走らせることができる？(あんまり詳しくないのでよく分からず)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GoogleSearchとのDeepLinkの生成やリアルタイムでちゃんとGoogleにIndexされているか確認できるようになる(若干理解が怪しい)&lt;/li&gt;
&lt;li&gt;まだEclipseを使ってる人がいるけど早く移行して欲しい。&lt;/li&gt;
&lt;li&gt;InstantRun(インクリメンタルビルドって言ってたやつ？)の紹介

&lt;ul&gt;
&lt;li&gt;リソースやソースを変更したらすぐに反映される&lt;/li&gt;
&lt;li&gt;1,2秒で反映される&lt;/li&gt;
&lt;li&gt;デモ(あとでもっと詳しいデモがあった)&lt;/li&gt;
&lt;li&gt;Instant Runは全てのエミュレータ、実デバイス、IceCreamSandwithAPI15までの全OSで動く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;新バージョン使ったライブコーディング-by-dave:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;新バージョン使ったライブコーディング(by Dave)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ライブコーディングしながら実デバイスにデプロイ&lt;/li&gt;
&lt;li&gt;ホットスワップ(Instant Run)

&lt;ul&gt;
&lt;li&gt;リソースとコードが一瞬でデプロイできる例(最初かなりトラブってたｗ)&lt;/li&gt;
&lt;li&gt;チェスゲームを例に、ビューを3Dにしたり、コマのサイズの変更をライブで行って一瞬で変わっていた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DevSummitの今後のセッションの説明をして終了&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;android-application-architecture:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;Android application architecture&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;スピーカ: Yigit Boyar &amp;amp; Adam Powell&lt;/li&gt;
&lt;li&gt;9:45am - 10:30am&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BlkJzgjzL0c&#34;&gt;動画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/Architecture-1.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Google IOでのトークの特別編で元のはYoutubeにあるみたいなことを言っていたが元の動画は見つからず。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;br&gt;
アーキテクチャをどうするかをテーマにしたベストプラクティスの話がメインで、様々なトピックに分けて話を進めていった。
ポスト(?)にコメントをできるようなサンプルアプリを例に話をしていた。オフラインでつけたコメントがオンラインになったときにどう反映されるべきか、どう読み込まれるべきか等の内容を、上記画像にあるような図とコードスニペットを交えて説明。バックグランドプロセスの設計の話、UXの話、APIデザインの話、メモリ管理、パフォーマンスの話等、それぞれ概要レベルだけど幅広いトピックをカバー。
最後にはサンプルアプリ上でのデモも行った。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;respecting-user-attention-notification-best-practices:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;Respecting User Attention: Notification Best Practices&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;11:00am - 11:45am&lt;/li&gt;
&lt;li&gt;スピーカ: Chris Wren(MediaLabのPhDで現在はAndroid System UIチームの人)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5bJTSsk4sLU&#34;&gt;動画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/Notification-1.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;br&gt;
Notification(通知)のベストプラクティスをキャプチャのトピックに分けてユーザ体験の観点から紹介していく話。ライブコーディングではないがコードスニペットを使ってコードの紹介もしていった。コードの全体は&lt;a href=&#34;https://android.googlesource.com/platform/packages/experimental/+/master/NotificationShowcase/src/com/android/example/notificationshowcase/NotificationService.java&#34;&gt;こちら&lt;/a&gt;にある。話としては通知をどうするべきかがメインだったので、例えば通知は誰からの電話なら通知する等を細かくできるようにするべきとか、何をロックスクリーンに出すべきか、通知はユーザがアクションを取れるものする、Dismissできない通知の扱いをどうするべきか等だった。個人的にはGlobal Dismiss(ある端末で通知をDismissしたら他の端末でもDismissされる)の話が出てて、全アプリで実装してもらいたいと思った。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;keep-it-secret-keep-it-safe:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;Keep it Secret, Keep it Safe&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;11:45am - 12:30pm&lt;/li&gt;
&lt;li&gt;スピーカ: Chad Brubaker(AndroidのSecurityチームの人)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fcWVV0Hafuk&#34;&gt;動画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/Security-1.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;br&gt;
TLSをなぜか使うべきかといった基本的な話から実際にどう使うかといった話、Marshmallowで追加されたStrictMode等の新機能の話、バッドノウハウやセキュリティテストツール(&lt;a href=&#34;https://github.com/google/nogotofail&#34;&gt;nogotofail&lt;/a&gt;)の話等、セキュリティに関連する幅広い話題を扱っていた。

&lt;ul&gt;
&lt;li&gt;概要的な話だと、カフェなどで簡単に繋がるけど危ないという話、センシティブな情報のやり取りを行わない場合でも安全じゃない通信を使った場合は攻撃(例えばhttpサイトにアクセスしてXSSのようなことをされたりマルウェアに感染する等といった意味合いだと思われる)をされる可能性はあるといった話。&lt;/li&gt;
&lt;li&gt;HTTPはHTTPSに変更するべしとかJavaSocketならSSLSocketにしようみたいな話をスニペット交えて説明。&lt;/li&gt;
&lt;li&gt;サーバサイドはサービス使うなら殆ど対応してるよって話。&lt;/li&gt;
&lt;li&gt;マシュマロでサポートされたStrictMode等の話を注意点を交えて説明。&lt;/li&gt;
&lt;li&gt;TLSをチェックする際の注意点や設定等での間違えやすいポイント。&lt;/li&gt;
&lt;li&gt;正しいように見えてダメなコード等を紹介。&lt;/li&gt;
&lt;li&gt;セキュリティ関連のコードはよく分からずにコピペして使わない&lt;/li&gt;
&lt;li&gt;nogotofailという設定ミス等をテストするためのツールの紹介&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2日目:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;2日目&lt;/h1&gt;

&lt;h2 id=&#34;what-s-new-in-android-studio:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;What&amp;rsquo;s new in Android Studio&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;9:05am - 9:45am&lt;/li&gt;
&lt;li&gt;スピーカ: Jamal Eason, Tor Norbye &amp;amp; Xavier Ducrohet&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fs0eira2pRY&#34;&gt;動画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/whats-new-in-android-studio.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt; &lt;br&gt;
IDE Enhancement、ビルドシステム、Emulatorの大きく3つのトピックに関する話。IDE EnhancementではGPU Monitor, ネットワークモニター, App Template, テーマエディタ, Vector Asset Studio等、I/O&amp;rsquo;15以降に追加された新機能の紹介があった。ビルドシステムではdxが4パラで動くようになった等のdxの改善の話やProGuardの改善の話、dx/Shrinkerのベンチマークの話、不要な解像度のアセットを入れずにパッケージングする等の話があり、その後Instant Runの内部的な話とデモがあった。デモではHot Swap(リソースやメソッド内の変更等)やCold Swap(メソッド自体の追加等アプリを終了して再実行が必要になるもの)、データバインディング(後のセッション参照)の話などをしながら進めていた。Emulatorの話ではPerformanceとUsabilityに分けて話をしていた。PerformanceはCPU,GPU,IOのパフォーマンスが上がったいう話。Usabilityではキーボード・ショートカットの追加、GoogleMapでGPSが使えたり場所のエミュレーションもできるデモ、ネットワークも2G,3G等やローミング・SIMが無いケース等様々なエミュレーションができるという紹介、バッテリ残量のエミュレーション、指紋認証のエミュレーション、リサイズやローテートのデモ、PCからファイルをドラッグ・アンド・ドロップするデモ、SMSを送信するデモ等、様々な機能を紹介していた。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-binding-write-apps-faster:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;Data Binding &amp;ndash; write apps faster&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;9:45am - 10:30am&lt;/li&gt;
&lt;li&gt;スピーカ: George Mount &amp;amp; Yigit Boyar&lt;/li&gt;
&lt;li&gt;[動画]()(まだ)&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/data-binding.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;p&gt;これはKeynoteに次いで大きい発表だった気がするので見た方が良いかも((追記)と思ったらI/Oで既に発表された内容だったらしいｗ情弱ですいませんｗ)。Viewやリソースの書き方が大分変わるという話。例えばリソースに&lt;code&gt;@+id/productImage&lt;/code&gt;みたいな書き方に変わって、ソースのオブジェクトから&lt;code&gt;@{prod.image}&lt;/code&gt;みたいなことができるようになる。&lt;code&gt;@{条件 ? VISIBLE : GONE}&lt;/code&gt;みたいにロジックを入れることもできる(複雑なロジックは入れるべきではないとのこと。できるできないじゃなくて多分責務とか可読性の観点から)。
また、上記キャプチャの通りfindViewByIdが不要になるということで、特定のインターフェースを実装したクラスを使ってfindViewById不要な操作ができるようになる(理解怪しいかも)。リソースでonClick使ったメソッド指定も色々なものが追加されて、onLongClickとかonTextChangeといったコールバックが利用できるみたい。この辺を実現するためのアノテーション等含めたソースの書き方やベストプラクティスも紹介していたのでこの動画は見るなり変更を追うなりした方が良さそう。&lt;/p&gt;

&lt;h2 id=&#34;the-android-build-system:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;The Android Build System&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;11:00am - 11:45am&lt;/li&gt;
&lt;li&gt;スピーカ: Xav Ducrochet, Jerome Dochez &amp;amp; Michal Bendowski&lt;/li&gt;
&lt;li&gt;[動画]()(まだ)&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/build-system.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;br&gt;
デーモンモードを使おう、デーモンにメモリを十分割り当てよう、SSDを使おう等といったビルド時のパフォーマンスのチェックリストを紹介(上記キャプチャ)。
その他、単体テスト時等環境ごとのビルド設定の話、NDKやGradleプラグインの拡張の話やテストAPIの話等、話題が多岐に渡っていた。
javacしてからdxまでのフローの話とかGradleの仕組みの話にも触れ意見等がある場合は&lt;a href=&#34;https://github.com/google/android-gradle-dsl&#34;&gt;GitHubのレポジトリ&lt;/a&gt;を見て欲しいみたいな話をしていた。
InstantRunの内部動作の触りの話もしていた。クラスは一度しかロードされず、新しいクラスローダにより書き換えた箇所のみ反映されるらしい。新たに反映されたものは新しいインスタンスが生成された場合に反映されるので、Singletonを使っている場合等は実行されなかったりするので注意が必要みたい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;android-testing:7fbc869a0cbce8433b744831670a7f7b&#34;&gt;Android Testing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;11:45am - 12:30pm&lt;/li&gt;
&lt;li&gt;スピーカ: Stephan Linzner, Jose Alcérreca &amp;amp; Jan-Felix Schmakeit&lt;/li&gt;
&lt;li&gt;[動画]()(まだ)&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://daikikohara.github.io/images/android_dev_summit/test.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;div class=&#39;citation&#39;&gt;&lt;cite&gt;&lt;a href=&#34;https://androiddevsummit.withgoogle.com/stream&#34;&gt;https://androiddevsummit.withgoogle.com/stream&lt;/a&gt;より引用&lt;/cite&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;br&gt;
Androidのテストの自動化に関するトピックを上記のキャプチャにあるように単体テストからUIテスト、パフォーマンスのテストといったレイヤに分けて網羅的に扱う話。例はノートを取るアプリだったけど、あんまりアプリを例にした説明は多くなかった。単体テストでは外部要因を排除してテストできるようにするべきとか、例えばMockを使う等、それをどのように実現するかと言った話やTDDの話等をしていた。
UIテストの話はEspressoの紹介がメインで書き方やデモや注意点等に触れていた。あとは&lt;a href=&#34;https://developers.google.com/cloud-test-lab/&#34;&gt;Cloud Test Lab&lt;/a&gt;等を使って複数デバイスでもテストできるようになっているみたいな話もしていた。
パフォーマンステストの話では1コミットでパフォーマンスが大幅に低下することもあったりするし、それを毎回手動でテストをするのは大変なので、パフォーマンステストも自動化することの重要性を述べていた。Gradleのプラグインでテスト単位でネットワークやグラフィックのパフォーマンスを取得できるらしく、アノテーションを使ったそれらのテストの書き方の紹介などをしていた。
最後に&lt;a href=&#34;https://www.code-labs.io/codelabs/android-testing/#0&#34;&gt;Android Testing Codelab&lt;/a&gt;や&lt;a href=&#34;https://www.code-labs.io/codelabs/android-perf-testing/#0&#34;&gt;同パフォーマンステストのCodelab&lt;/a&gt;、&lt;a href=&#34;https://github.com/googlesamples/android-testing&#34;&gt;テストのサンプル&lt;/a&gt;等の各種リソースの紹介を行っていた。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Twitter Flight視聴メモ</title>
      <link>https://daikikohara.github.io/blog/2015/10/22/twitter-flight-2015/</link>
      <pubDate>Thu, 22 Oct 2015 00:27:02 -0700</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/10/22/twitter-flight-2015/</guid>
      <description>

&lt;p&gt;2015年10月21日にサンフランシスコで行われた&lt;a href=&#34;https://twitterflight.com/&#34;&gt;Flight&lt;/a&gt;の視聴メモです。
ライブストリーミングが流れてたメインホールのみです。例によってかなりいい加減です。そして最初の方はどこでライブストリーミングが見れるのか分からず逃しました。
てかTechCrunchのページでしか流してなくてオフィシャルサイトにリンクが無いという、情弱には厳しい配信でした。。。
ちなみにキーノートセッションの話はオフィシャルの&lt;a href=&#34;https://blog.twitter.com/2015/welcome-to-flight-2015&#34;&gt;このページ&lt;/a&gt;が網羅的にまとまっています。
動画やスライドはまだ公開されてないみたいですが、公式サイトのトップにすぐ上げるみたいなことが書かれてるのですぐにどこかに上がるんじゃないかと思います。&lt;/p&gt;

&lt;h2 id=&#34;キーノート-途中から:13b100812254a41a415038807a1df3b8&#34;&gt;キーノート(途中から)&lt;/h2&gt;

&lt;p&gt;多分メインの話は&lt;a href=&#34;https://get.fabric.io/&#34;&gt;Fabric&lt;/a&gt;のアップデート。&lt;br&gt;
ちなみにFabricとはiOS/Android向けにクラッシュレポートや広告等の様々な機能を提供するモバイルプラットフォーム。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitterの特徴とかの紹介&lt;/li&gt;
&lt;li&gt;一部で騒がれていた&lt;a href=&#34;https://blog.twitter.com/2015/introducing-twitter-polls&#34;&gt;投票機能&lt;/a&gt;を誰でも使えるようになった&lt;/li&gt;
&lt;li&gt;Fabricとそのエコシステムの新機能の話

&lt;ul&gt;
&lt;li&gt;Fabricはリリースから1年で225,000のdeveloperを獲得&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://try.crashlytics.com/&#34;&gt;Crashlytics&lt;/a&gt;は1.4BillionのAndroidデバイス上にインストールされているらしい。Unityをサポートするようなことを言っていた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://answers.io/&#34;&gt;Answers&lt;/a&gt;では&lt;a href=&#34;http://venturebeat.com/2015/10/21/twitter-answers-adds-audience-insights-a-deeper-look-at-app-users/&#34;&gt;Audience Insights&lt;/a&gt;で誰が使っているかの追跡がしやすくなった。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mopub.com/&#34;&gt;MoPub&lt;/a&gt;の紹介&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://venturebeat.com/2015/10/21/twitter-launches-a-tweet-composer-to-show-tweet-previews-inside-other-apps/&#34;&gt;Tweet Composer&lt;/a&gt;の紹介&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fabric.io/kits/android/stripe&#34;&gt;Stripe&lt;/a&gt;やaws等、新規に追加された&lt;a href=&#34;https://fabric.io/blog/introducing-eight-new-sdks-on-fabric&#34;&gt;8つのSDK&lt;/a&gt;の紹介。&lt;br&gt;
Stripeと&lt;a href=&#34;https://fastlane.tools/&#34;&gt;fastlane&lt;/a&gt;は代表者がそれぞれを話をしていた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Embeded Tweetの話(あとのセッションで詳しい話があったので省略)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gnip.com/&#34;&gt;GNIP&lt;/a&gt;を使ってカスタマーサポートを行う例。これもあとで出てきたので省略するが、ここではTargetの事例ビデオやHiltonの事例ビデオが流れた。

&lt;ul&gt;
&lt;li&gt;こんな&lt;a href=&#34;https://twitter.app.box.com/customer-service-on-twitter&#34;&gt;カスタマーサービスのドキュメント&lt;/a&gt;のリンクも貼ってた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://furni.xyz/&#34;&gt;Furni&lt;/a&gt;というFabricを使った模範的なアプリの紹介。githubにソースもある。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-week-in-the-life-of-a-fabric-developer-by-brian-swift-and-hemal-shah:13b100812254a41a415038807a1df3b8&#34;&gt;A Week in the Life of a Fabric Developer by Brian Swift and Hemal Shah&lt;/h2&gt;

&lt;p&gt;Fabricチームの二人が&lt;a href=&#34;https://github.com/twitterdev/cannonball-android&#34;&gt;Cannonball&lt;/a&gt;というFabricを使って作られたデモアプリのリリースを通してFabricを使った開発の1週間がどのようなものかを紹介する内容。
(ちなみにCannonballとはEmojiでPoemを書くサイトらしいが、poemは詩じゃなくて素敵な出来事とかそーゆー意味だと思われる。)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;月曜はFeature vs Fix、火曜はFeedback等、テーマに基づいて進めていく。&lt;/li&gt;
&lt;li&gt;例えば月曜は、新しいことに取り掛かる前に現状のものがstableかを確認する。FabricのコンポーネントであるCrashlyticsやAnswersを使うと全体のステータスがダッシュボードで一望できるしフォーカスすべきクラッシュも分かる。&lt;/li&gt;
&lt;li&gt;同様に火曜・水曜とFabricのコンポーネントを使ってどう進めていくかの紹介。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;growing-and-monetizing-your-app-using-twitter-by-john-egan:13b100812254a41a415038807a1df3b8&#34;&gt;Growing and Monetizing Your App Using Twitter by John Egan&lt;/h2&gt;

&lt;p&gt;MoPubのディレクタであるJohnがパネリストと広告・マネタイズに関する話をする。
パネリストは&lt;a href=&#34;http://asherv.com/threes&#34;&gt;Threes&lt;/a&gt;の人とRedditの人と&lt;a href=&#34;http://www.glu.com&#34;&gt;glu&lt;/a&gt;の人。
広告のターゲティングとかを考えた最適化の話。あんまり興味なかったので省略。&lt;del&gt;Redditの人が美人だった。&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;twitter上でカスタマーサービスを行うための話-公式サイト上の表記はsecret-session:13b100812254a41a415038807a1df3b8&#34;&gt;Twitter上でカスタマーサービスを行うための話(公式サイト上の表記はSecret Session)&lt;/h2&gt;

&lt;p&gt;Twitter上でカスタマーサービスを行うための話。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;満足度の向上が見込めることやコールセンター等と比べて低コストで実現できること、利益にも影響があること等を数字を交えて紹介。&lt;/li&gt;
&lt;li&gt;全世界で使われていることやリーチのしやすさなど、Twitterのメリットを紹介。&lt;/li&gt;
&lt;li&gt;Spotifyの事例紹介

&lt;ul&gt;
&lt;li&gt;メンションも無しに不満をツイートした人を発見してやり取りをした例&lt;/li&gt;
&lt;li&gt;SpotifyからSoundcloudを使い始めたという人を見つけてやり取りした例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;カスタマーサービスのためにDMを改善した話

&lt;ul&gt;
&lt;li&gt;140文字以上送れるようにした&lt;/li&gt;
&lt;li&gt;設定によってはフォローの状態に関わらず送れるようにした(知らんかった)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対応のステップ

&lt;ul&gt;
&lt;li&gt;Get Tweets - メンションされたツイートや関連ツイートを検索して探す。&lt;/li&gt;
&lt;li&gt;Triage/Prioritize - 対応すべきツイートを決める。&lt;/li&gt;
&lt;li&gt;Respond - リプライする。ダイレクトメッセージを送る。参考になるメディアファイルを送る等。&lt;/li&gt;
&lt;li&gt;Measure - 効果を測る。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キーノートでも出てきた&lt;a href=&#34;https://gnip.com/&#34;&gt;GNIP&lt;/a&gt;の話。(キーノートの話と混ざってます)

&lt;ul&gt;
&lt;li&gt;従来のRealTimeとHistoryAPIの他に&lt;a href=&#34;https://blog.twitter.com/2015/gnip-insights-apis&#34;&gt;InsightAPI&lt;/a&gt;が追加された。&lt;/li&gt;
&lt;li&gt;InsightAPIはハッシュタグのクリックやリツイート等の挙動を追跡するためのEngagementAPIとオーディエンスのより詳細な情報を収集するためのAudienceAPIからなる。&lt;/li&gt;
&lt;li&gt;例えば、自社製品のツイートを発見しても発言者が客か分からないけど、自社のサービスにツイッターでログインして貰う等して紐付ければ分かるようになるみたいな話。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;embeddedツイートの話-公式サイトの表記はsecret-session:13b100812254a41a415038807a1df3b8&#34;&gt;Embeddedツイートの話(公式サイトの表記はSecret Session)&lt;/h2&gt;

&lt;p&gt;サイトやアプリにツイートをEmbedするのが簡単・便利になったみたいな話。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitterでいろんなストーリーが共有されている。ストーリーはTwitterから始まる、みたいな導入話。&lt;/li&gt;
&lt;li&gt;ツイートをembedするためにツイートのURLをコピーする必要があるので面倒だったけどもっと賢くできるようになった。&lt;/li&gt;
&lt;li&gt;コレクションというものが導入されて、ツイートされるとその関連ツイートがOrganizeされて一つのCollectionIDが振られてそれを使ってPublish(サイトやアプリにembedすることだと思われる)できるみたいな概念の話。&lt;/li&gt;
&lt;li&gt;具体的には以下3つ紹介されてたけど違いがイマイチ分からなかったｗ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tweetdeck.twitter.com/&#34;&gt;TweetDeck&lt;/a&gt;で既存のビューにカラムを追加してそこにツイートをドラッグして追加していき、そのカラム単位でembedできる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://curator.twitter.com/&#34;&gt;Curator&lt;/a&gt;を使うと関連ツイートのまとめができ、そこからクリックやドラッグアンドドロップで必要なツイートのみ選択してwebサイトやアプリにembedできる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://publish.twitter.com/&#34;&gt;Publish&lt;/a&gt;を使うとembeddedツイートの管理とかができる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;発表者が変わってembedするためのコードはこれだけ的なデモ。embed後にWebのUIみたいなので紐付いている情報を更新してもちゃんとembedした側に反映されるみたい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;電話番号でサインアップするためのdigitsの話-公式サイトの表記はsecret-session:13b100812254a41a415038807a1df3b8&#34;&gt;電話番号でサインアップするためのDigitsの話(公式サイトの表記はSecret Session)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://digits.com/&#34;&gt;Digits&lt;/a&gt;というemailやFacebookConnect等の代わりに電話番号で認証する仕組みとSDKの話。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電話番号を持ってる人の数の紹介して電話番号は誰でも持っているみたいな導入から始まる。&lt;/li&gt;
&lt;li&gt;Digitsを使う理由

&lt;ul&gt;
&lt;li&gt;電話番号は誰でも持っている。&lt;/li&gt;
&lt;li&gt;コンバージョンレート(が何を指してるのかちゃんと理解できなかったけどサインアップ画面が出てサインアップした人の割合だったと思う)が85%。Facebookコネクトは75%、Emailは65%らしい。&lt;/li&gt;
&lt;li&gt;使いやすい。&lt;br&gt;
スマホ版のPeriscopeにDigitsを使ってサインアップ、ログインするデモ&lt;br&gt;
SMSが届いて通知領域に表示されている確認コードをそのまま入力して登録完了。&lt;/li&gt;
&lt;li&gt;voiceサポート等の新機能の追加等を行っていて追加料金無しで使える&lt;/li&gt;
&lt;li&gt;コストが安いらしい。普通に電話番号認証しようとすると0.11ドル/Verification(どこから出てきた数字か不明)かかるけどDigitsならタダ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;数行の追加で対応できるというコードの紹介。カスタマイズするのも数行。&lt;/li&gt;
&lt;li&gt;(次の人の話だったけど)ロシアとアゼルバイジャンと台湾はDigitsのログインが凄く多いらしい。ロシアはemail30%、Digits70%くらいだった。&lt;/li&gt;
&lt;li&gt;facebookに情報を預けるのが不安でfacebookでログインする人は減っているみたいなことを言っていた。&lt;/li&gt;
&lt;li&gt;ログイン時間がemailよりも早いみたいなことを言っていた。(登録までのフローの話だったかも？)&lt;/li&gt;
&lt;li&gt;フレンドファインダーもある。開発者側のメリットだけじゃなく、ユーザも友達で誰が使っているか分かる。&lt;/li&gt;
&lt;li&gt;2nd factor認証に使ったりみたいな話。&lt;/li&gt;
&lt;li&gt;その他、planchat(多分&lt;a href=&#34;https://itunes.apple.com/us/app/planchat-painless-planning/id1005882133&#34;&gt;これ&lt;/a&gt;)がemailとfacebookからDigitsベースに変えた話とか&lt;a href=&#34;https://www.calvinapp.com/&#34;&gt;calvin&lt;/a&gt;とか&lt;a href=&#34;https://vine.co/&#34;&gt;vine&lt;/a&gt;とかの例とか。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;up-periscope-by-kayvon-beykpour-and-sara-haider:13b100812254a41a415038807a1df3b8&#34;&gt;Up Periscope by Kayvon Beykpour and Sara Haider&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.periscope.tv/&#34;&gt;Periscope&lt;/a&gt;の話。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitterと同様のコンセプトで今起きていることをライブビデオで実現するというところから始まった。&lt;/li&gt;
&lt;li&gt;去年リリースで今年の3月時点で10Mアカウントを達成。&lt;/li&gt;
&lt;li&gt;どんなコンテンツが共有されているかの話。時事的なのとかコラボ動画みたいのとか。目新しい感じではなかった。&lt;/li&gt;
&lt;li&gt;On AirウィジェットというTwitterボタンみたいなのもある。Liveになったら表示がLiveになる。&lt;/li&gt;
&lt;li&gt;Liveデモで未リリースの機能紹介。3つくらい紹介してたけどよく分からず。。。多分過去動画の人気の位置が分かる、マップでライブだけじゃなくて過去のも出る、テレポートボタン(これは何だかホントに分からず)。&lt;/li&gt;
&lt;li&gt;技術紹介

&lt;ul&gt;
&lt;li&gt;エンジニアリングツールとスタックの紹介。バックエンドはGo、ストリーミングは&lt;a href=&#34;http://www.wowza.com/&#34;&gt;WOWZA&lt;/a&gt;、その他&lt;a href=&#34;https://www.pubnub.com/&#34;&gt;PubNub&lt;/a&gt;、CircleCI、TravisCI、AWS、&lt;a href=&#34;http://www.iron.io/&#34;&gt;Iron.IO&lt;/a&gt;、&lt;a href=&#34;https://www.algolia.com/&#34;&gt;Algolia&lt;/a&gt;、そしてもちろんFabricを使っているらしい。コミュニケーションツールはSlack。&lt;/li&gt;
&lt;li&gt;Fabricはバリバリで使っているので色々なコンポーネントの紹介&lt;/li&gt;
&lt;li&gt;ちなみに今朝(多分Flightが原因で)負荷が5倍くらいになったせいで落ちたんだけど、Fabric周辺ツールのおかげですぐに原因が分かって対応できた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;所感:13b100812254a41a415038807a1df3b8&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;多分メインホールだけだったからですが、一番の売りであるFabricに関する話が中心でした。
他の話も聞きたかったですが、そもそもFabricをあまり知らなかったのでこれはこれで勉強になりました。
機能によってはGoogleAnalyticsとかで良いじゃんって思ったりもしますが、他に選択肢があるのは良いことですし、ビューも良い感じだったかなと思います。
とりあえず時間があったら試せる範囲で試そうかなと思います。&lt;/p&gt;

&lt;p&gt;そんな感じで以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Universe視聴まとめ</title>
      <link>https://daikikohara.github.io/blog/2015/10/02/github-universe-2015/</link>
      <pubDate>Fri, 02 Oct 2015 18:27:02 -0700</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/10/02/github-universe-2015/</guid>
      <description>

&lt;p&gt;2015年10月1日、2日にSFで行われた&lt;a href=&#34;http://githubuniverse.com/&#34;&gt;GitHub Universe&lt;/a&gt;の視聴レポートです。
近場でしたがお金とか時間の問題で参加はしてません。
&lt;a href=&#34;http://www.ustream.tv/githubuniverse&#34;&gt;ustreamのライブ&lt;/a&gt;で見てたんですが結構途切れたりしたのと、自分の理解が怪しいところがあるのと、興味がないところはあんまりちゃんと書いてないので、メモ書き程度だと思ってもらえればと思います。
ちなみにKeynote以外は3セッション並列だったんですが、ライブで見てたので自分が見たものだけです。
録画もustreamのサイトから見れるのでちゃんと見たい人はそちらへお願いします。&lt;/p&gt;

&lt;h1 id=&#34;1日目:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;1日目&lt;/h1&gt;

&lt;h2 id=&#34;keynote-by-chris-wanstrath-github-ceo:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Keynote by Chris Wanstrath, GitHub(CEO)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;始まってるのに気づかず最後の方しか見れず。&lt;/li&gt;
&lt;li&gt;最後の方は&lt;a href=&#34;http://gloomyson.github.io/StarCraft/&#34;&gt;StarCraft&lt;/a&gt;の話をしていた。GitHub Pagesで動いてるらしい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;githubのコマーシャルが流れる:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Githubのコマーシャルが流れる&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;多分あとで&lt;a href=&#34;https://www.youtube.com/user/github/videos&#34;&gt;ここ&lt;/a&gt;に上がるはず？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exploring-the-solar-system-from-wherever-you-are-by-joseph-minafra-nasa:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Exploring the Solar System from wherever you are! by Joseph Minafra, NASA&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sservi.nasa.gov/&#34;&gt;SERVI&lt;/a&gt;の紹介&lt;/li&gt;
&lt;li&gt;月の形成に関するビデオ紹介&lt;/li&gt;
&lt;li&gt;誰でも参加できるような&lt;a href=&#34;http://sservi.nasa.gov/communication-programs/&#34;&gt;イベント&lt;/a&gt;も開いている。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pub.lmmp.nasa.gov/LMMPUI/LMMP_CLIENT/LMMP.html&#34;&gt;Lunar Mapping and Modeling Portal(LMMP)&lt;/a&gt;で月を探索できる。

&lt;ul&gt;
&lt;li&gt;RestAPIもある。(NASAは他にも色々APIあるっぽい)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;月だけじゃなくて&lt;a href=&#34;http://vestatrek.jpl.nasa.gov/&#34;&gt;Vesta&lt;/a&gt;(小惑星用？)とか&lt;a href=&#34;http://marstrek.jpl.nasa.gov/&#34;&gt;火星用&lt;/a&gt;とかもある。&lt;/li&gt;
&lt;li&gt;全然githubは出てこなかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;five-years-building-a-culture-and-handing-it-off-by-kellan-elliott-mccrea-former-cto-of-etsy:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Five years, building a culture, and handing it off by Kellan Elliott-McCrea, former CTO of Etsy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;中継あったけど別作業のため殆ど聞けず。&lt;/li&gt;
&lt;li&gt;ソフトを作るのが下手だから頑張らないといけないみたいな話。&lt;/li&gt;
&lt;li&gt;デプロイするときに現行システムを壊すリスクと自信の話。

&lt;ul&gt;
&lt;li&gt;テストとかモニタリングとかして自信を上げていこう。&lt;/li&gt;
&lt;li&gt;CSSの小さい修正でシステムを破壊したやつがいたりするので、デプロイする修正の規模と比例しないよみたいな。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;using-git-lfs-by-github-microsoft-atlassian:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Using Git LFS by GitHub/Microsoft/Atlassian&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speaker(それぞれが順番に話していくスタイル)

&lt;ul&gt;
&lt;li&gt;Traci Coffman, GitHub&lt;/li&gt;
&lt;li&gt;Saeed Noursalehi, Microsoft&lt;/li&gt;
&lt;li&gt;Rick Olson, GitHub&lt;/li&gt;
&lt;li&gt;Allen Smith, GitHub&lt;/li&gt;
&lt;li&gt;Steve Streeting, Atlassian&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rick-from-github:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Rick from GitHub&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Git LFS(Large File Storage)の概要紹介

&lt;ul&gt;
&lt;li&gt;デカいファイルを追加したときにGitレポジトリにはテキストポインタを保存してファイルの実態はLFSに保存するといったことができる。&lt;/li&gt;
&lt;li&gt;LFS用にいくつかのサブコマンドを追加した&lt;/li&gt;
&lt;li&gt;Git hookとintegrateされている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なんでOSS?

&lt;ul&gt;
&lt;li&gt;他の人にも使ってもらって新しいuse caseを知りたいから。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;LFS1.0リリース

&lt;ul&gt;
&lt;li&gt;APIを書き換えた&lt;/li&gt;
&lt;li&gt;インストーラの改善。特にWindows用。aptもある。&lt;/li&gt;
&lt;li&gt;LFS拡張という仕組みを作った。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lfsのコマーシャル-https-www-youtube-com-watch-v-11d1zsez8g-が流れた:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_11d1ZsEZ8g&#34;&gt;LFSのコマーシャル&lt;/a&gt;が流れた。&lt;/h3&gt;

&lt;h3 id=&#34;steve-from-atlassian:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Steve from Atlassian&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;今までいろんなOSS作ってきたけど、Largeファイルの扱いにはいつも苦戦してきた&lt;/li&gt;
&lt;li&gt;自分たち(Atlassian)もGithubも同じことを考えて同じ結論に辿り着いた

&lt;ul&gt;
&lt;li&gt;それぞれgit-lfsとgit-lobというものを作ろうと考えた。同じようなコンセプトでいずれもGoで書こうとした。&lt;/li&gt;
&lt;li&gt;2015年のはじめにmergeすることを決めてアナウンスした。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/git-lfs&#34;&gt;https://github.com/github/git-lfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;https://git-lfs.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コマンドの実行例とか機能紹介

&lt;ul&gt;
&lt;li&gt;こんな感じでfetchすることもできる&lt;code&gt;git lfs fetch --include=models --exclude=models/vehicles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ssh apiとかロックといった機能もある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;saeed-noursalehi-microsoft:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Saeed Noursalehi, Microsoft&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大きなチームのためにgitをスケールさせることを目標にしている&lt;/li&gt;
&lt;li&gt;MicrosoftもLFSにcontributeしている。

&lt;ul&gt;
&lt;li&gt;NTLMauth to LFS clientとかいろいろ(色々書いてあったけどメモ忘れ)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs.aspx&#34;&gt;VSO&lt;/a&gt;使ってzipファイルをLFSのgitレポジトリにpushするデモ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;allen-smith-github:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Allen Smith, GitHub&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;デモ(ちなみにエディタはatom)

&lt;ul&gt;
&lt;li&gt;git lfsをインストールする&lt;/li&gt;
&lt;li&gt;.gitconfigをいじる([filter &amp;ldquo;lfs&amp;rdquo;]の下にsmudgeとかcleanとか書いてあったけどよく見えず。。。)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git lfs track &#39;*.png&#39;&lt;/code&gt;とやると対象のファイルをlfsの管理対象にできる&lt;/li&gt;
&lt;li&gt;ローカルのファイルはlfsフォルダ以下に保存される&lt;/li&gt;
&lt;li&gt;lfs用のpre push hookが追加される&lt;/li&gt;
&lt;li&gt;git-lfs pull&lt;/li&gt;
&lt;li&gt;github上ではテキストポインタじゃなくてちゃんとファイルが見える。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ci-in-world-of-microservices-by-surya-gaddipati-groupon:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;CI in world of MicroServices by Surya Gaddipati, Groupon&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;最初はJenkinsのマスター一つだった&lt;/li&gt;
&lt;li&gt;今は400ジョブ、18,000ビルド/week&lt;/li&gt;
&lt;li&gt;今までCIがダメで辞めた人もいた

&lt;ul&gt;
&lt;li&gt;CIがダメだとbad cultureを引き起こす&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今の仕組みではビルド(デプロイ)ボタンを押したらジョブを設定してパーミッションに応じたsshキーの作成やコードのpush、独立した環境用のマシンの作成などを行い独立した環境でビルドが走る(のを目指している？)&lt;/li&gt;
&lt;li&gt;UI - CIはキレイで直感的なUIを持つべき。JenkinsのUIは古臭い。&lt;/li&gt;
&lt;li&gt;Metrics - ビルド、デプロイではどれくらい時間がかかるか等を測って最適化するべき。&lt;/li&gt;
&lt;li&gt;Extensible - CIはextensibleであるべき。JenkinsはExtensibleという意味では非常に良い。&lt;/li&gt;
&lt;li&gt;Secure - CIはセキュアであるべき。誰がアクセスできるか、誰がpushできるか、等。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/groupon/DotCi&#34;&gt;DotCi&lt;/a&gt;というOSSのCIツールを作った。

&lt;ul&gt;
&lt;li&gt;一言で言うとJenkinsをTraviceCIのようにするもの？&lt;/li&gt;
&lt;li&gt;JenkinsとGithubとDockerをつなぐ&lt;/li&gt;
&lt;li&gt;ジョブの設定はバージョン管理できるべき。DotCiもymlで設定できるからバージョン管理できる。&lt;/li&gt;
&lt;li&gt;ジョブは簡単に並列化できるべき。DotCiでもymlに書くだけで並列化できる。&lt;/li&gt;
&lt;li&gt;metricsの例としてビルド時間の遷移グラフの紹介。&lt;/li&gt;
&lt;li&gt;DotCiもExtensible。DotCiのプラグインが書ける。&lt;/li&gt;
&lt;li&gt;GithubAuthorization。Githubのレポジトリのアクセス権とのマッピングができる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドが大分崩れてた。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;every-company-is-a-software-company-パネルディスカッション:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Every Company is a Software Company(パネルディスカッション)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speaker

&lt;ul&gt;
&lt;li&gt;Kakul Srivastava, GitHub&lt;/li&gt;
&lt;li&gt;Michael Davis, John Deere&lt;/li&gt;
&lt;li&gt;Dragos Maciuca, Ford&lt;/li&gt;
&lt;li&gt;Hima Mukkamala, GE&lt;/li&gt;
&lt;li&gt;Samir Shah, Target&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自己紹介が終わったタイミングでストリーミング一時停止&lt;/li&gt;
&lt;li&gt;まとめると

&lt;ul&gt;
&lt;li&gt;ソフトウェアはリリースしても終わりじゃないってことを理解しよう&lt;/li&gt;
&lt;li&gt;いろんなバックグランドの人とコラボすることになるからお互いを理解しよう&lt;/li&gt;
&lt;li&gt;ツールを使うことになったりしたら教育しよう&lt;/li&gt;
&lt;li&gt;エンジニアが何かを試したいって言ってきたときに試させてあげるのが大事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;みたいな感じ？&lt;/p&gt;

&lt;h2 id=&#34;10-ways-people-are-mis-using-github-pages-for-fun-and-profit-by-ben-balter-github:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;10 ways people are (mis)using GitHub Pages for fun and profit by Ben Balter, GitHub&lt;/h2&gt;

&lt;p&gt;同じ時間の他のセッションも聞きたかったけどちょうどGitHub Pages使ったばかりだったのでこれを聞くことに。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHubPages&lt;/a&gt;は主に以下の3つのことに使える

&lt;ul&gt;
&lt;li&gt;project page&lt;/li&gt;
&lt;li&gt;personal page&lt;/li&gt;
&lt;li&gt;organization page&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;staticページはHTML,JavaScript,CSSだけで作れる。昔はPHPでやってたようなことがこの3つでできる。&lt;/li&gt;
&lt;li&gt;WordpressとかDrupalみたいなCMSも流行ったけど、bespoke pageを生成するし、スケールさせようとすると複雑になる。GitHubPagesならGitHubにpushするだけ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gh-pages&lt;/code&gt;ブランチ切ったり等の作り方の説明&lt;/li&gt;
&lt;li&gt;GitHugPagesの10の使い方(例は全部jekyllだった)

&lt;ol&gt;
&lt;li&gt;Collaboration - editボタン設置してtypo直してもらったりおかしなところを直してもらうとか&lt;/li&gt;
&lt;li&gt;CI - &lt;a href=&#34;https://github.com/gjtorikian/html-proofer&#34;&gt;html proofer&lt;/a&gt;みたいなツール使ってツールでバリデーションもできる。&lt;/li&gt;
&lt;li&gt;Collections - &lt;a href=&#34;http://choosealicense.com/&#34;&gt;choosealicense.com&lt;/a&gt;みたいなサイトを作れる。&lt;/li&gt;
&lt;li&gt;Data - アプリで使うjsonファイルとかの置き場にも使える。pushするだけでビルドしなくて良いしお金もかからない。例は&lt;a href=&#34;http://usdeptveteransaffairs.github.io/&#34;&gt;U.S. Department of Veterans Affairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Collaborative Policy Making - &lt;a href=&#34;https://project-open-data.cio.gov/&#34;&gt;Project Open Data&lt;/a&gt;とか政府のプロジェクトでも使っている。ポリシーを決める際にgithubを使うことで誰でもissueを上げたり、pull request送ったりできる。(素晴らしいので日本でもやって欲しい。)&lt;/li&gt;
&lt;li&gt;Branded Profiles - 技術系の会社は&lt;a href=&#34;https://twitter.github.io/&#34;&gt;twitter&lt;/a&gt;とか&lt;a href=&#34;https://sap.github.io/&#34;&gt;sap&lt;/a&gt;とか&lt;a href=&#34;http://ibm.github.io/&#34;&gt;ibm&lt;/a&gt;とか&lt;a href=&#34;https://microsoft.github.io/&#34;&gt;microsoft&lt;/a&gt;とか&lt;a href=&#34;https://yelp.github.io/&#34;&gt;yelp&lt;/a&gt;とかいろんな会社が作ってるよって紹介。技術系じゃなくても&lt;a href=&#34;https://cfpb.github.io/&#34;&gt;cfpb&lt;/a&gt;とかも作ってる。&lt;/li&gt;
&lt;li&gt;private sites - まだパブリックにしたくない場合はprivateにもできる。jekyll-authを使うと簡単にできる。&lt;/li&gt;
&lt;li&gt;Documentation - github helpはGitHub Pagesで作られているらしい。&lt;a href=&#34;http://lunrjs.com/&#34;&gt;lunr.js&lt;/a&gt;使ってクライアントサイドサーチを使っているらしい。&lt;/li&gt;
&lt;li&gt;Automated Publishing - 小さいお店とかでもメールを受信してそれをベースにパブリッシュするような仕組みを作ってたりする。やりかたはいくつかある。普通にaddしてcommitしてpullしてやったり、GitHubのCRUD API使ったり(&lt;a href=&#34;https://developer.github.com/v3/repos/contents/&#34;&gt;これ？&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Client-side Applications - StarCraftの話をしたかったけど最初にされちゃったので、&lt;a href=&#34;http://prose.io/&#34;&gt;prose&lt;/a&gt;の紹介。GitHub Pages上でファイルの作成・削除・編集とかができるみたい。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1日目最後のkeynoteはライブ無し:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;1日目最後のKeynoteはライブ無し&lt;/h2&gt;

&lt;h1 id=&#34;2日目:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;2日目&lt;/h1&gt;

&lt;h2 id=&#34;keynote-by-nicole-sanchez-github-and-tiffani-ashley-bell-detroit-water-project:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Keynote by Nicole Sanchez, GitHub and Tiffani Ashley Bell, Detroit Water Project&lt;/h2&gt;

&lt;h3 id=&#34;tiffani:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Tiffani&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.detroitwaterproject.org/&#34;&gt;Detroit Water Project&lt;/a&gt;の人&lt;/li&gt;
&lt;li&gt;アメリカでは35,000,000世帯が水道料金等の基本料金を払うことも難しいくらい貧しい。&lt;/li&gt;
&lt;li&gt;そういった人たちのためにお金を払えたらどうかということを考えた。&lt;/li&gt;
&lt;li&gt;Twitterで呟いて反応した人たちとGitHub上でプロジェクトを作って、困っている人とドナーをつなぐシステムを作った。自分はエンジニアじゃないけど会ったこともない人とコラボできたのは素晴らしいと感じた。&lt;/li&gt;
&lt;li&gt;払えない人はインタビューだけじゃなくて水道会社からスクレイプしたデータを使って本当に困っているか確認しているらしい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;nicole:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Nicole&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.refugerestrooms.org/&#34;&gt;refuge restroom&lt;/a&gt;という主にtrans gender向けにrest roomを検索できるプロジェクトも同じようなコンセプトでGitHub上で開発されている。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://connecthome.hud.gov/&#34;&gt;connecthome.hud.gov&lt;/a&gt;という貧困層にブロードバンドをもたらすプロジェクトも同様。

&lt;ul&gt;
&lt;li&gt;インターネットにアクセスしないとできないホームワークがあるのにアクセスできない子どもたちがいるのはおかしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まだ自分がdevelperじゃないと思ってる層を発見していきたい。次の天才、革命者を発見したい。埋もれた才能を発見するのは我々の責任。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;chike-aguh:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;chike aguh&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;スピーカーに名前がなかったけど&lt;a href=&#34;http://everyoneon.org/&#34;&gt;everyoneon&lt;/a&gt;の人みたい&lt;/li&gt;
&lt;li&gt;everyoneonは情報格差をなくすためのプロジェクトでconnecthomeはeveryoneonの一部みたい。&lt;/li&gt;
&lt;li&gt;インターネットアクセスが無い子どもたちの中には深夜や早朝にマクドナルドの周辺で宿題をやる子供もいる。&lt;/li&gt;
&lt;li&gt;こういった層をなんとかするのは我々の責任。皆に参加して欲しい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;anil-dash-founder-makerba-se:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Anil Dash, Founder, makerba.se&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;多くの人は誰がインターネットを作ったのか知らないし、自分が使ってるアプリを誰が作ったのかも知らない。伝えられたストーリーしか知らないから我々は伝えなければならない。
同時に相手にキミは何を作ったのかを聞かなきゃいけない。みたいな抽象的な話。よく分からんかった。。。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;makerba.se/universe&#34;&gt;ここ&lt;/a&gt;でやってねみたいな。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;marianna-tessel-svp-of-engineering-docker:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Marianna Tessel, SVP of Engineering, Docker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;コミュニティの話。結論的にはどんなコミュニティでも良いから関わろうみたいな感じ？&lt;/li&gt;
&lt;li&gt;途中で出てきた色々な数字

&lt;ul&gt;
&lt;li&gt;Dockerイメージのダウンロード数は800,000,000/月&lt;/li&gt;
&lt;li&gt;Dockerの公開レポジトリは77%が外からのコントリビュート&lt;/li&gt;
&lt;li&gt;Meetupは60の国で210グループある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rethinking-production-monitoring-by-james-smith-bugsnag:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Rethinking Production Monitoring by James Smith, Bugsnag&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;映像切れきれ&lt;/li&gt;
&lt;li&gt;技術的負債は返済するのが大変&lt;/li&gt;
&lt;li&gt;開発者は40%の時間をバグの原因究明にかけてるという調査がある&lt;/li&gt;
&lt;li&gt;以下は良くない

&lt;ul&gt;
&lt;li&gt;リリースが最後のプロセスだと思ってしまう&lt;/li&gt;
&lt;li&gt;ユーザが文句を言うまで待ってしまう&lt;/li&gt;
&lt;li&gt;誰も文句を言ってないからOKだと思ってしまう&lt;/li&gt;
&lt;li&gt;誰の責任かという問題が欠如してしまっている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;7つの原理

&lt;ul&gt;
&lt;li&gt;ACCEPT - ソフトウェアが出荷後に壊れることを認める&lt;/li&gt;
&lt;li&gt;AUTOMATE - エラー・不具合を検知できる仕組みを導入しておく&lt;/li&gt;
&lt;li&gt;AGGREGATE - エラーをただ流れてくるまま見るのではなく、グルーピングしたりする&lt;/li&gt;
&lt;li&gt;NOTIFY - エラーで逐一メール通知とかじゃなくてグルーピングした単位とかでこのエラーだけ送るみたいなことをしてノイズを減らす&lt;/li&gt;
&lt;li&gt;PRIORITIZE - 全てのバグを直すことはできない&lt;/li&gt;
&lt;li&gt;DIAGNOSE - 何が問題かというだけじゃなくて、こうすれば直るみたいなActionableなものにする&lt;/li&gt;
&lt;li&gt;TEND - 誰も見ないという状態をなくして、誰かがエラーをケアするという状態を当たり前にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;実際の例

&lt;ul&gt;
&lt;li&gt;failure hooksを使う。言語に組み込まれているようなものがあればそれを使う(JavaのUncaughtExceptionHandlerとか)。なければコードが何分以上かかったら何かをするというような処理で代替するとか。&lt;/li&gt;
&lt;li&gt;影響を測定する。それぞれの問題で何人に影響があるか等。&lt;/li&gt;
&lt;li&gt;深刻さを測定する。上記と似ているが違うもの。管理画面のエラーなら気にしないとか、paymentのページで出ているなら重要等、セグメントで優先度を付ける。&lt;/li&gt;
&lt;li&gt;Capture Diagnostic Data。再現可能なデータを取れるようにしておく。いくら使った時に出るかや、どのデバイスで出ているか等。クラッシュ時にそれらのデータを取得できるようにしておく。&lt;/li&gt;
&lt;li&gt;コラボレーションしやすくしておく。チャット使うとか。チャットに不具合を送る仕組みを入れるとか。&lt;/li&gt;
&lt;li&gt;不具合対応の進捗を追跡できるようにしておく。JIRAとかを使って人をアサインしたり。&lt;/li&gt;
&lt;li&gt;Team Structures。誰もケアしないという状態を作らない。エンジニアのストラクチャを考えなおす。バグはサポートじゃなくてエンジニアがケアする。&lt;/li&gt;
&lt;li&gt;Create a bug team。バグをケアするチームを作る。一人では無理。もしくはローテーションを組むのも良い。プロダクトの知識が深まる。&lt;/li&gt;
&lt;li&gt;誰がそのコードを最後に触ったかを知る。責任を押し付けるためじゃないけど知るのは大事。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;changing-lives-with-open-data-by-hidenori-fujimura-geospatial-information-authority-of-japan-abhi-nemani-danny-whalen-remix:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Changing Lives with Open Data by Hidenori Fujimura, Geospatial Information Authority of Japan, Abhi Nemani, Danny Whalen, Remix&lt;/h2&gt;

&lt;h3 id=&#34;hidenori-fujimura:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Hidenori Fujimura&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;日本人登場。めっちゃ日本人英語で和むｗ&lt;/li&gt;
&lt;li&gt;GeoデータをBSDとかCC0のライセンスで提供している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://maps.gsi.go.jp/&#34;&gt;これ&lt;/a&gt;かな？&lt;/li&gt;
&lt;li&gt;disaster情報の提供

&lt;ul&gt;
&lt;li&gt;御嶽山の噴火時の例&lt;/li&gt;
&lt;li&gt;洪水の例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;droneで撮った映像とかも&lt;/li&gt;
&lt;li&gt;iOS9で動かないのでコントリビューション待ってます的な。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;danny-from-remix:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Danny from remix&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getremix.com/&#34;&gt;remix&lt;/a&gt;の会社紹介

&lt;ul&gt;
&lt;li&gt;transitシステム&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openstreetmap.org/&#34;&gt;OpenStreetMapData&lt;/a&gt;とか&lt;a href=&#34;https://developers.google.com/transit/gtfs/&#34;&gt;GTFS&lt;/a&gt;とかのOpen Dataを使っている。&lt;/li&gt;
&lt;li&gt;データとかAPIの観点で考えると乗り物と場所のデータになるけど、15分以上待ちたくないとかユーザ視点で考えるべき。Human Experienceが大事みたいな。&lt;/li&gt;
&lt;li&gt;理解が怪しい。。。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;abhi:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;abhi&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;肩書が書かれてなかった。LAの何かの人&lt;/li&gt;
&lt;li&gt;LAのウェブサイト

&lt;ul&gt;
&lt;li&gt;400くらいのデータセットを提供しているけど誰も使わなかった。&lt;/li&gt;
&lt;li&gt;Open Dataにしてusefulだと思わせてからは使うようになった。&lt;/li&gt;
&lt;li&gt;バウンスレートも50%から5%になった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;何かのダッシュボード

&lt;ul&gt;
&lt;li&gt;GoogleDocsのデータを表示するだけだけど技術を知らない人からしたらこれだけでも有用性が変わるみたいな話&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;犯罪情報は利用できるまで18ヶ月かかるけどこれをもっと早くしたい&lt;/li&gt;
&lt;li&gt;理解が怪しい。。。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;electron-desktop-apps-with-web-languages-by-jessica-lord-github:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Electron: Desktop Apps with Web Languages by Jessica Lord, GitHub&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Electronの概要

&lt;ul&gt;
&lt;li&gt;atomを開発する際に生まれたもの&lt;/li&gt;
&lt;li&gt;CEF(Chromium Embedded Framework)や&lt;a href=&#34;http://nwjs.io/&#34;&gt;NW.js&lt;/a&gt;使ったけど合わなかったのでElectronが始まった。&lt;/li&gt;
&lt;li&gt;ChromiumベースでHTML、CSSの、JavaScriptだけでクロスプラットフォームデスクトップアプリが作れる。&lt;/li&gt;
&lt;li&gt;node.js使えるからnpmをそのまま使える。ファイルシステムにもアクセスできる。&lt;/li&gt;
&lt;li&gt;OSのファイルダイアログとかnotificationとかも使える&lt;/li&gt;
&lt;li&gt;OSの自動更新とかwinインストーラとかにも対応できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Electronの中身の紹介

&lt;ul&gt;
&lt;li&gt;メインプロセスとサブプロセスでどんな感じで動いてるかのお話。&lt;/li&gt;
&lt;li&gt;図無しのテキストだと意味分からないと思うので省略&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;軽いデモ

&lt;ul&gt;
&lt;li&gt;npm install -g electron-prebuild&lt;/li&gt;
&lt;li&gt;electron .&lt;/li&gt;
&lt;li&gt;以上、HelloWorldが動いた的な。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Electron使ってる企業紹介。MSとかSlackもElectronでプロダクトを作っているらしい。&lt;/li&gt;
&lt;li&gt;Electron使ってるOSSの紹介

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muan/mojibar&#34;&gt;mojibar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mafintosh/playback&#34;&gt;playback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API1.0を1月に出す予定

&lt;ul&gt;
&lt;li&gt;AppStore compatibleにする&lt;/li&gt;
&lt;li&gt;Windowsサポートの充実&lt;/li&gt;
&lt;li&gt;ドキュメントの充実&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://electron.atom.io/&#34;&gt;electron.atom.io&lt;/a&gt;見てね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ここでバトンタッチしてjiboの話:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;ここでバトンタッチしてJiboの話&lt;/h3&gt;

&lt;p&gt;スピーカーの名前無いけど&lt;a href=&#34;http://blog.jibo.com/2015/07/29/jibo-making-development-readily-accessible-to-all-developers/&#34;&gt;このブログ&lt;/a&gt;の右の人&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jibo.com/&#34;&gt;Jibo&lt;/a&gt;は世界初のファミリーロボットでありプラットフォームである。&lt;/li&gt;
&lt;li&gt;Jiboが挨拶するデモ&lt;/li&gt;
&lt;li&gt;SDKはElectronで作られている&lt;/li&gt;
&lt;li&gt;JIBOでできること

&lt;ul&gt;
&lt;li&gt;スピーチ recognitionとかできる&lt;/li&gt;
&lt;li&gt;音がどこから来るか、誰が話しているか分かる&lt;/li&gt;
&lt;li&gt;Text to Speechもできる&lt;/li&gt;
&lt;li&gt;エレクトロンでできることは全てできる&lt;/li&gt;
&lt;li&gt;自然言語を理解できる&lt;/li&gt;
&lt;li&gt;タッチセンサーもある&lt;/li&gt;
&lt;li&gt;顔の部分にアニメーション表示できる。ウィンクとかもできる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;開発のデモ

&lt;ul&gt;
&lt;li&gt;3DのデザインツールみたいなのでGUIで弄ってる
＊jibo runって打つと実機の顔にアニメーションが流れる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;価格は750ドル&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;offline-web-apps-on-github-pages-by-myk-melez-mozilla:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Offline Web Apps on GitHub Pages by Myk Melez, Mozilla&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;オフラインアプリとはネットワーク接続して無くても動くアプリ&lt;/li&gt;
&lt;li&gt;ApplicationCacheがあったけど実装によっては長い間更新されない問題とかが多発してるので廃止することになった&lt;/li&gt;
&lt;li&gt;ServiceWorkers使ってね

&lt;ul&gt;
&lt;li&gt;別のコンテキスト、別のスレッドで動く&lt;/li&gt;
&lt;li&gt;ブラウザがサポートしてなければ普通にオンラインで動く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mozilla.github.io/oghliner/&#34;&gt;OGHLINER&lt;/a&gt;(オフライナーと読む)を使うとGitHub Pagesでオフラインアプリを簡単に作れる

&lt;ul&gt;
&lt;li&gt;オフラインアプリ用にServiceWorkerを作ってくれる&lt;/li&gt;
&lt;li&gt;デプロイメント - GitHub Pages用にデプロイしてくれる&lt;/li&gt;
&lt;li&gt;auto deploy via travis - masterにpushしたらデプロイしてくれる(まだ問題があるらしい)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デモ

&lt;ul&gt;
&lt;li&gt;オフライナー自体でgulpを使ってるらしい。&lt;/li&gt;
&lt;li&gt;oghliner offline distでキャッシュをするファイルを指定する？&lt;/li&gt;
&lt;li&gt;oghliner deploy distでデプロイする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;カウントダウンするだけのアプリのデモ

&lt;ul&gt;
&lt;li&gt;ネットワークをオフにしてタブ閉じたりブラウザ閉じて開いたりしてもカウントダウンを続けてる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ServiceWorkersの注意

&lt;ul&gt;
&lt;li&gt;HTTPSが必要。ローカルにはいらない。&lt;/li&gt;
&lt;li&gt;backgroundsync、webpushとかにも使える&lt;/li&gt;
&lt;li&gt;CORS。(の何が注意かよく分からなかった)&lt;/li&gt;
&lt;li&gt;ServiceWorkerは全てin progress(Firefox)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mobileでも動くか？

&lt;ul&gt;
&lt;li&gt;chromeは動く。FFも動くようになる。safariは知らん。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;keynote-by-marco-annunziata-chief-economist-ge:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;Keynote by Marco Annunziata, Chief Economist, GE&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;殆ど聞かず。&lt;/li&gt;
&lt;li&gt;とりあえずGEデジタルというソフトウェア会社を2011年に始めて250人から2015年には14000人の開発者と30000人のスタッフに成長したって話だけ聞いた。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;感想:db5f55ac7c63c0f449d84a630e3141c6&#34;&gt;感想&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;LFSは専用のコマーシャルが流れたくらいなので今回の一番の売りはLFS1.0のリリースだったみたい？&lt;/li&gt;
&lt;li&gt;Open Dataのポリシーとか政府系のプロジェクトでもGitHub使って誰でもissue上げたりPR送れたりするのは良さそう。日本でもやって欲しい。&lt;/li&gt;
&lt;li&gt;貧困層へのアプローチが必要等、日本の技術系カンファレンスでは出てこない話題があって面白かった。(日本には貧困層が少ないからとか言われそうだけど)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;かなり適当ですが以上です。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
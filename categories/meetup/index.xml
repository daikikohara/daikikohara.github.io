<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meetup on tbd</title>
    <link>https://daikikohara.github.io/categories/meetup/</link>
    <description>Recent content in Meetup on tbd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 12 Feb 2016 12:49:18 -0800</lastBuildDate>
    
	<atom:link href="https://daikikohara.github.io/categories/meetup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unikernelのmeetupの視聴メモ</title>
      <link>https://daikikohara.github.io/blog/2016/02/12/unikernel-meetup/</link>
      <pubDate>Fri, 12 Feb 2016 12:49:18 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2016/02/12/unikernel-meetup/</guid>
      <description>Docker社が買収したUnikernel Systems社が扱ってるUnikernelについて全然知らなかったので、Docker Online MeetupのUnikernelの動画を見たついでに、分からないところを調べられた範囲で補完しつつまとめてみました。なお、超基本的な内容です。
動画だけでなくスライド自体も上がってます。
先に自分が理解した範囲でまとめを書くと、以下のような流れみたいです。
 Unikernelは単一のアプリを動かすためのシンプルかつ高速なOSで色々な実装がある。 でも従来のOSと違うし、各実装ごとにツールもあるしで、アプリをビルドして動かすのが大変。 dockerのエコシステムに取り込んでdockerコマンドでビルド・デプロイできるようになったらいいんじゃないってことで買収した。  従来のOSの問題 http://www.slideshare.net/Docker/docker-online-meetup-31-unikernelsより引用現在使われているLinux等のOSは膨大なコードを持ち、アプリケーションに必要でない部分もシステムに組み込む必要がある。 そのためアプリケーションがSystemAPIと結びついてしまい、以下のような問題がある。
 OSのディストリビューションやバージョンの制約を受ける アプリケーションのアドホックな設定が必要になる ファイアウォール等、システム全体の設定が必要になる  これは従来のOSの目的が、複数のユーザが複数のアプリを同時に動かすことだからだ。 しかしマイクロサービス等、現在のアーキテクチャでは一つのアプリのみを動かすだけという使い方も考えられるため、従来のOSの目的と合わなくなってきている。
また、ポータブル性の欠如という問題もある。 従来のシステムでビルドは環境に依存するが、実際は複数のターゲットを扱わないといけない。 例えば複数のターゲットを持つクラウドサービスやスマートフォンといったもの。またJavaScriptもブラウザにより異なるし、IoTでもデバイス毎に異なる。 これらは複数のターゲットごとにプログラムせねばならず、コードの再利用は難しい。
Unikernelとは何か http://www.slideshare.net/Docker/docker-online-meetup-31-unikernelsより引用これらの問題を解決するためにUnikernelが役に立つ。 Unikernelには以下のような特徴がある。
 OSのコンポーネントをライブラリの集合として利用できるようにしている。 ビルド時にアプリケーションのコードをシステムライブラリとリンクし、アプリケーションが必要とするライブラリだけを使うことが可能。 単一のプロセス、単一のアドレススペースのイメージが作成される。 アプリケーションは同じコードベースを使い、ビルド時にシステムライブラリを切り替えるだけでターゲットの変更が可能。  なお、Unikernelのコンセプトは新しいものではなく、1990年代から存在していた。
利点 前述の特徴から以下のような利点がある。
 必要なライブラリのみをスタティックにリンクできるため、シンプルにできる。 TCP接続が確立される間にブートできるくらい高速。 レイヤーが少ないので低レイテンシおよび、パフォーマンスの予測が容易。 リソースをあまり使わない。例えばUnikernelの実装の一つであるMirageOSのアプリは10MB以下のメモリしか使わない。MirageOSのDNSサーバは200KBしかない。 マイクロサービスやImmutable Infrastructure等の新しいデザインパターンの構築が容易になる。  Unikernelを使う場合の開発サイクル 以下のような流れで開発していくことができ従来の方法と大きくは変わらない。
 アプリのビルドは普通に行うが、OSのコンポーネントに対応するライブラリを使ってリンクすることと、従来のホストOSとの依存性を排除するという点が従来と異なる。 テストや測定は通常通りに行うことが可能。 Unikernelとしてビルドする デプロイする  利用するツールもCIシステム、gdb、プロファイラ、linterやdtraceといった従来のものが利用可能。 カーネル空間・ユーザ空間というものがなく全てがユーザ空間で動くので、通常のツールが利用できる。
Unikernelの実装 Unikernelには多くの実装がある。 それぞれトレードオフがある。 例えばMirageOSとHaLVMはまっさらな状態からライブラリを書き直している。 一方Rumprunは長年使われてきたNetBSDのコンポーネントを再利用している。
(ちなみにMirageOSはOCaml、HaLVMはHaskell、RumprunはCでそれぞれ書かれている)
このように現在のアーキテクチャに適したUnikernelだが、導入時の障壁として以下のようなものが考えられる。
 デベロッパーはUnikernelを使うために様々なツールを学ぶ必要がある。 複数のプロジェクトがあるということは複数のツールチェーンがあるということ デプロイが単純には行かないということでもある  これらを解決するために、DockerはUnikernelと手を取った。</description>
    </item>
    
    <item>
      <title>NomadとOttoのmeetup参加メモ</title>
      <link>https://daikikohara.github.io/blog/2015/11/11/nomad_otto_features/</link>
      <pubDate>Wed, 11 Nov 2015 22:45:00 -0800</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/11/11/nomad_otto_features/</guid>
      <description>HashiCorpのCTOであるArmon Dadgar氏によるNomadとOttoに関するmeetupの参加メモ。 またしてもかなり不完全ですが。。。こっちって技術系でもmeetupでPC開いている人が殆どいなくてメモとりづらいんですよね。
 動画は無し。スライドはこちら ステッカーは配ってませんでした  HashiCorpプロダクト全般の話
  Vagrantがあった状態で会社を作った。最初はDevOpsの会社だと思われていたがDevOpsだけじゃなくてDev寄りのツール等も作ってきた。 Vaultはオープンにするつもりで作ったわけではなかった。サポート等をする内に認証情報等を保存することが増えてきて、どうやって管理したら良いんだろうということを考えて作って社内で使っていたものをオープンソースにした。 実は最初のうちはPostgreSQLに平文で保存していた(しようとしていたかも？)。 ちなみにHashiCorpはaにアクセントがある模様。oだと思ってた^^;  Nomadの話  Nomadはクラスタ管理ツール 内部的にはConsulとSerfを使っている。 コンテナ・VM・スタンドアロンのアプリをサポートしている。  現在はコンテナはDocker、VMはQEMU/KVM、スタンドアロンはJar(Java)と静的バイナリのみ。今後拡大予定。  amplabやGoogle Researchの研究をかなり参考にした。 データセンターやクラウドサービス、リージョンなどを跨いで管理できる EvaluationしてからAllocationするといった感じのアーキテクチャを紹介(図が無いとアレですが。。。) ジョブの分散処理はロックとかではなくOptimisctic Concurrencyによるとのこと。 Digital Oceanでテストしたらしい。数百ノード使ったとか言っていた。 0.2ではService Discovery、SystemScheduler、RestartPolicies、EnhancedConstraints等を追加予定 0.3ではCron、JobQueuing、Latency-Aware Scheduling等を追加予定  Ottoの話  Vagrantでは同じVagrantファイルで全く同じものができる。ただし、昔の脆弱性等をそのままデプロすることになるし、古いOSを使うことになる。 Ottoではこの辺りは自動で解決してくれる。 vagrant upがotto devになる等の対応の話 開発者がコードのデプロイをするにはググッて出てきた情報をコピペするという無駄な作業を今でも行っていたりする。しかも例えばrailsアプリのデプロイであれば毎回同じようなことをするだけなのに。 ottoならotto infra, otto build, otto deployの3ステップで完了する。 何の設定もしなくてもコマンドを実行するだけで良い。 設定が必要な場合はAppfileに書くことができる。 Appfileの書き方の例。Appfileは独自フォーマットみたい。  以上。
とりあえずちゃんと使ってみたらまたQiita辺りにポストしようかと思います。</description>
    </item>
    
    <item>
      <title>Full Stack Robotics/IoT Using Go参加レポート</title>
      <link>https://daikikohara.github.io/blog/2015/10/07/iot_using_go_meetup/</link>
      <pubDate>Wed, 07 Oct 2015 14:53:26 -0700</pubDate>
      
      <guid>https://daikikohara.github.io/blog/2015/10/07/iot_using_go_meetup/</guid>
      <description>マウンテンビューのGoogle本社で行われたGoでIoTデバイスを操作するGobotのイベントの参加メモです。 資料はまだ上がってないので上がった段階で追記します。
概要  日時: 2015年10月7日 19:00 - 20:30 場所: Google Building CL2 イベントページ  内容 LT by Kevin イベントページの発表者のlast nameは間違っているらしい(ググったけど映画監督しか出てこなったのはそのせいかｗ)。 正しい苗字はメモれなかった。
内容はイベントの紹介程度。
 GDG DevFest - まもなくポストするとのこと なぜかGeek Bike Rideとかいうチャリンカー向けイベントの紹介 子供向けイベントの紹介。  devoxx4kidsという webcomponents4kids   子供向けのイベントの紹介では発表者のお子さんの口から、こんなことをした、みたいな紹介が入った。
メインセッション 発表者 Ron Evans(twitterアカウント)
 hybridgroupの人。 Gobotに限らず、Cylon.js,ArtooといったIoT系のフレームワークを作っている。 子供向けのRubyのプロジェクトであるkidsrubyも作っている。  Gobotとは(サイトに書いてあるレベルのまとめ) GobotはGolangで様々なIoTプラットフォーム向けのプログラムが書くためのもの。
公式ページのトップにはArduinoでLチカするコードが載っているが、Arduinoに限らず15のプラットフォームに対応している(発表後の質疑応答で18と言っていたのでサイトの情報は若干古い模様。またcylon.jsの方が対応プラットフォームが多いとのこと)。 この中にはArduinoのほか、ARDroneやラズパイ、EdisonといったデバイスだけでなくMQTTやOpenCVといったものまで含まれる。 また、GPIOドライバにより7つ、I2Cドライバにより6つの機器をサポートしている。
APIも用意されており、デバイスの状態を確認することなどが可能。 robeauxというReact.jsベースのダッシュボードで確認することもできる。
CLIの場合はGortを使って操作するようデザインされてるけどgobot独自のCLIもある。
発表内容  アーキテクチャの図(スライド参照) ArduinoでLチカ(ちなみに英語ではblinking LED)をするデモ  コードはGobotのサイトトップに書いてあるものと全く同じだった。 Arduino上ではGoは動かないけどコンパイルしたコマンドを送ることができる  Edisonで同じくLチカをするデモ  Arduino版とのコードの差分はimort文1行とAdaptor生成部分のみ(firmata.NewFirmataAdaptor(&amp;quot;arduino&amp;quot;, &amp;quot;/dev/ttyACM0&amp;quot;)がedison.NewEdisonAdaptor(&amp;quot;edison&amp;quot;)になるだけ) edisonの場合は中身がLinuxなのでsshで接続してGoのプログラムを普通に走らせることができる  続いてEdisonでボタンを押してる間だけ光るデモ GobotでAPIを立ち上げるプログラムを動かして、そこにcurlを送るデモ  host:port/api/robotsが起点になる模様。 デモでは操作じゃなくて参照しかしなかった。  Gortのデモ  gort scan bluetoothでbluetooth接続されている機器を一覧表示してそこからrfcomm connectで接続(rfcommは普通のLinuxコマンドらしい。知らんかった。)  Spheroのデモ  robeauxを使ったデモ WebのUIからコマンド実行してSpheroを動かすデモ。あんまり思った通りの方向に進んでなかったｗ  Twitterで指定のハッシュタグで呟いてSpheroまたはEdisonを抽選で1名にプレゼント！  めっちゃ欲しかったけど当たりませんでした。。。  commander.</description>
    </item>
    
  </channel>
</rss>